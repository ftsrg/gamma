/********************************************************************************
 * Copyright (c) 2018-2020 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.plugintemplate.transformation.patterns

import "http://www.mit.bme.hu/gamma/statechart/Model/Interface"
import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart"
import "http://www.mit.bme.hu/gamma/plugintemplate/transformation/Traceability"

pattern packageTraces(sourcePackage : Package, targetPackage : Package) {
	PackageTrace.sourcePackage(trace, sourcePackage);
	PackageTrace.targetPackage(trace, targetPackage);
} 

pattern statechartTraces(sourceStatechart : StatechartDefinition, targetStatechart : StatechartDefinition) {
	StatechartTrace.sourceStatechart(trace, sourceStatechart);
	StatechartTrace.targetStatechart(trace, targetStatechart);
}

pattern regionTraces(sourceRegion : Region, targetRegion : Region) {
	RegionTrace.sourceRegion(trace, sourceRegion);
	RegionTrace.targetRegion(trace, targetRegion);
}

pattern initialStateTraces(sourceInitialState : InitialState, targetInitialState : InitialState) {
	InitialStateTrace.sourceInitialState(trace, sourceInitialState);
	InitialStateTrace.targetInitialState(trace, targetInitialState);
}

pattern shallowHistoryStateTraces(sourceShallowHistoryState : ShallowHistoryState, targetShallowHistoryState : ShallowHistoryState) {
	ShallowHistoryStateTrace.sourceShallowHistoryState(trace, sourceShallowHistoryState);
	ShallowHistoryStateTrace.targetShallowHistoryState(trace, targetShallowHistoryState);
}

pattern deepHistoryStateTraces(sourceDeepHistoryState : DeepHistoryState, targetDeepHistoryState : DeepHistoryState) {
	DeepHistoryStateTrace.sourceDeepHistoryState(trace, sourceDeepHistoryState);
	DeepHistoryStateTrace.targetDeepHistoryState(trace, targetDeepHistoryState);
}

pattern choiceStateTraces(sourceChoiceState : ChoiceState, targetChoiceState : ChoiceState) {
	ChoiceStateTrace.sourceChoiceState(trace, sourceChoiceState);
	ChoiceStateTrace.targetChoiceState(trace, targetChoiceState);
}

pattern mergeStateTraces(sourceMergeState : MergeState, targetMergeState : MergeState) {
	MergeStateTrace.sourceMergeState(trace, sourceMergeState);
	MergeStateTrace.targetMergeState(trace, targetMergeState);
}

pattern forkStateTraces(sourceForkState : ForkState, targetForkState : ForkState) {
	ForkStateTrace.sourceForkState(trace, sourceForkState);
	ForkStateTrace.targetForkState(trace, targetForkState);
}

pattern joinStateTraces(sourceJoinState : JoinState, targetJoinState : JoinState) {
	JoinStateTrace.sourceJoinState(trace, sourceJoinState);
	JoinStateTrace.targetJoinState(trace, targetJoinState);
}

pattern stateTraces(sourceState : State, targetState : State) {
	StateTrace.sourceState(trace, sourceState);
	StateTrace.targetState(trace, targetState);
}

pattern transitionTraces(sourceTransition : Transition, targetTransition : Transition) {
	TransitionTrace.sourceTransition(trace, sourceTransition);
	TransitionTrace.targetTransition(trace, targetTransition);
}