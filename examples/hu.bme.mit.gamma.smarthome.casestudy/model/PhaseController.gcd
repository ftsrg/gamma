package control

import "/hu.bme.mit.gamma.smarthome.casestudy/model/Interfaces/Constants.gcd"
import "/hu.bme.mit.gamma.smarthome.casestudy/model/Interfaces/Interfaces.gcd"

import "/hu.bme.mit.gamma.smarthome.casestudy/model/Occupancy/Components/Camera.gcd"
import "/hu.bme.mit.gamma.smarthome.casestudy/model/Occupancy/Components/MotionDetector.gcd"

import "/hu.bme.mit.gamma.smarthome.casestudy/model/Ventilation/Components/AdaptiveVentilator.gcd"
import "/hu.bme.mit.gamma.smarthome.casestudy/model/Ventilation/Components/Switch.gcd"

@TransitionPriority = order-based
@AdaptiveContractStatechart = Controller
statechart Controller(initialCameraBattery : integer,
		initialCameraGranularity : integer, selfDefence : boolean) [
	// Motion-related
	port Camera : requires Camera
	port MotionDetector : requires MotionDetector
	// Internal communication related
	port Motion : provides Motion
	// Ventilation-related
	port Ventilation : provides Ventilation
	// Adaptation-related
	port CameraState : requires ComponentState
	port CameraActivation : provides InternalActivation
	//
	port MotionDetectorState : requires ComponentState
	port MotionDetectorActivation : provides InternalActivation
	//
	port VentilatorState : requires ComponentState
	port VentilatorActivation : provides InternalActivation
	//
	port SwitchState : requires ComponentState
	port SwitchActivation : provides InternalActivation
	//
] {
	timeout batteryRechargeTime
	// Tied to components
	var cameraBattery : integer := initialCameraBattery
	var cameraGranularity : integer := initialCameraGranularity
	
	var motionDetectorTemporarilyIdle : boolean := false
	var lastCountOfcamera : integer := 0
	var relayedMotionCountOfmotionDetector : integer := 0
	var ventilationLevelOfventilator : integer := MINIMUM_VENTILATION
	timeout timeoutTimeOfcamera
	timeout batteryRechargeTimeOfcamera
	timeout timeoutTimeOfmotionDetector
	timeout expectedDelayTimeOfmotionDetector
	timeout temporarilyIdleTimeOfmotionDetector
	timeout firstVentilationChangeTimeOfventilator
	timeout ventilationChangeTimeOfventilator
	timeout switchOffTimeOfventilator
	//
	
	region main {
		initial MainEntry
		
		state ControlVentilation {
			region occupancy {
				initial OccupancyEntry
				state UseCamera {
					region useCameraRegion  {
						initial UseCameraEntry
						
						state DefaultCameraMode {
							entry / cameraGranularity := BASE_GRANULARITY;
						}
						state LowGranularityCameraMode {
							entry / cameraGranularity := MINIMUM_GRANULARITY;
						}
						state HighGranularityCameraMode {
							entry / cameraGranularity := MAXIMUM_GRANULARITY;
						}
					}
				region mainOfcamera {
						state OperatingOfcamera {
							exit /
							lastCountOfcamera := 0;
							region operationRegionOfcamera {
								initial OperationEntryOfcamera
								state IdleOfcamera
								state SenseMotionOfcamera {
									entry /
									set timeoutTimeOfcamera := TIMEOUT_TIME s;
									lastCountOfcamera := 0;
								}
								state CountPersonsOfcamera {
									entry /
									raise Motion.personPresence(lastCountOfcamera);
									cameraBattery := cameraBattery - calculateBatteryDrownage(cameraGranularity);
								}
								choice CountPersonsChoiceOfcamera
							}
						}
						state ChargingOfcamera {
							entry /
							set batteryRechargeTimeOfcamera := BATTERY_RECHARGE_TIME s;
						}
						initial InitOfcameraOfcamera
					}
				}
				state UseMotionDetector {
					region mainOfmotionDetector {
						state OnOfmotionDetector {
							region operationRegionOfmotionDetector {
								initial OperationEntryOfmotionDetector
								state IdleOfmotionDetector
								state SensedMotionOfmotionDetector {
									entry /
									set timeoutTimeOfmotionDetector := TIMEOUT_TIME s;
								}
							}
							region selfDefenseRegionOfmotionDetector {
								initial SelfDefenseEntryOfmotionDetector
								state CountOfmotionDetector {
									entry /
									set expectedDelayTimeOfmotionDetector := EXPECTED_DELAY_TIME s;
								}
								choice SelfDefenseChoiceOfmotionDetector
							}
						}
						state TemporarilyIdleOfmotionDetector {
							entry /
							set temporarilyIdleTimeOfmotionDetector := TEMPORARILY_IDLE_TIME s;
							motionDetectorTemporarilyIdle := true;
							exit /
							motionDetectorTemporarilyIdle := false;
						}
						initial InitOfmotionDetectorOfmotionDetector
					}
				}
				
				state NoDetection
				
				merge OccupancyComponentMerge
				choice OccupancyComponentChoice
			}
			
			region ventilation {
				initial VentilationEntry
				state UseAdaptiveVentilator {
					region mainOfventilator {
						state VentilationOnOfventilator {
							entry /
							raise Ventilation.switchVentilation(true);
							exit /
							raise Ventilation.switchVentilation(false);
							region ventilationOnRegionOfventilator {
								initial OnEntryOfventilator
								state BaseVentilationOfventilator {
									entry /
									set switchOffTimeOfventilator := SWITCH_OFF_TIME s;
									ventilationLevelOfventilator := BASE_VENTILATION;
									raise Ventilation.ventilate(ventilationLevelOfventilator);
								}
								state FixVentilationOfventilator {
									entry /
									set firstVentilationChangeTimeOfventilator := FIRST_VENTILATION_CHANGE_TIME s;
									ventilationLevelOfventilator := calculateVentilationLevel(Motion.personPresence::count);
									raise Ventilation.ventilate(ventilationLevelOfventilator);
								}
								state DecreasingVentilationOfventilator {
									entry /
									set ventilationChangeTimeOfventilator := VENTILATION_CHANGE_TIME s;
									raise Ventilation.ventilate(ventilationLevelOfventilator);
								}
								choice VentilationChoiceOfventilator
							}
						}
						state VentilationOffOfventilator
						initial InitOfventilatorOfventilator
					}
				}
				state UseSwitch {
					region mainOfswitch {
						state VentilationOnOfswitch {
							entry /
							raise Ventilation.switchVentilation(true);
							raise Ventilation.ventilate(BASE_VENTILATION);
							exit /
							raise Ventilation.switchVentilation(false);
						}
						state VentilationOffOfswitch
						initial InitOfswitchOfswitch
					}
				}
				state FixVentilation {
					entry / raise Ventilation.switchVentilation(true);
						raise Ventilation.ventilate(BASE_VENTILATION);
				}
				
				merge VentilationComponentMerge
				choice VentilationComponentChoice
			}
			
			region recharge {
				initial RechargeEntry
				state Idle
				state RechargeCamera {
					entry / set batteryRechargeTime := BATTERY_RECHARGE_TIME s;
				}
			}
		}
	}
	// Occupancy //
	transition from MainEntry to ControlVentilation
	
	transition from OccupancyEntry to UseCamera
	transition from UseCamera to OccupancyComponentMerge when cycle [
		isBatteryLow(cameraBattery)]
	transition from UseCamera to OccupancyComponentMerge when CameraState.unavailability
		[CameraState.unavailability::unavailable]
	transition from UseCamera to OccupancyComponentMerge when CameraActivation.^deactivate
	transition from UseMotionDetector to OccupancyComponentMerge when cycle
		[motionDetectorTemporarilyIdle and isCameraAvailable()] // Camera should have priority?
	transition from UseMotionDetector to OccupancyComponentMerge when MotionDetectorState.unavailability
		[MotionDetectorState.unavailability::unavailable]
	transition from UseMotionDetector to OccupancyComponentMerge when MotionDetectorActivation.^deactivate
	transition from NoDetection to OccupancyComponentMerge when cycle [canReconfigure()]
	// Occupancy adaptation logic
	transition from OccupancyComponentMerge to OccupancyComponentChoice
	transition from OccupancyComponentChoice to UseCamera when !(CameraActivation.^deactivate) [isCameraAvailable()]
	transition from OccupancyComponentChoice to UseMotionDetector when !(MotionDetectorActivation.^deactivate) [
		!MotionDetectorState.unavailability::unavailable]
	transition from OccupancyComponentChoice to NoDetection [else] / // Adaptation in ventilation region
		raise VentilatorActivation.deactivate; raise SwitchActivation.deactivate;
	
	// Camera
	transition from UseCameraEntry to DefaultCameraMode
	
	transition from DefaultCameraMode to LowGranularityCameraMode when cycle [
		isBatteryHigh(cameraBattery)]
	transition from LowGranularityCameraMode to DefaultCameraMode when cycle [
		!isBatteryHigh(cameraBattery)]
	transition from DefaultCameraMode to HighGranularityCameraMode when cycle [
		isBatteryMediumLow(cameraBattery)]
	transition from HighGranularityCameraMode to DefaultCameraMode when cycle [
		!isBatteryMediumLow(cameraBattery)]
	////
	
	// Ventilation //
	transition from VentilationEntry to UseAdaptiveVentilator
	
	transition from UseAdaptiveVentilator to VentilationComponentMerge when VentilatorState.unavailability
		[VentilatorState.unavailability::unavailable]
	transition from UseAdaptiveVentilator to VentilationComponentMerge when VentilatorActivation.^deactivate
	transition from UseSwitch to VentilationComponentMerge when SwitchState.unavailability
		[SwitchState.unavailability::unavailable]
	transition from UseSwitch to VentilationComponentMerge when SwitchActivation.^deactivate
	transition from UseSwitch to VentilationComponentMerge when cycle [
		!VentilatorState.unavailability::unavailable] // Ventilator has priority
	transition from FixVentilation to VentilationComponentMerge when cycle [canReconfigure()]
	
	// Ventilation adaptation logic
	transition from VentilationComponentMerge to VentilationComponentChoice
	transition from VentilationComponentChoice to UseAdaptiveVentilator when !(VentilatorActivation.^deactivate) [
		!VentilatorState.unavailability::unavailable]
	transition from VentilationComponentChoice to UseSwitch when !(SwitchActivation.^deactivate) [
		!SwitchState.unavailability::unavailable]
	transition from VentilationComponentChoice to FixVentilation [else] / // Adaptation in occupancy region
		raise CameraActivation.deactivate; raise MotionDetectorActivation.deactivate;
	////
	
	// Charge camera - TODO separate component
	transition from RechargeEntry to Idle
	
	transition from Idle to RechargeCamera when CameraActivation.^deactivate
	transition from RechargeCamera to Idle when cycle [in-state(occupancy.UseCamera)] // Note priority
	transition from RechargeCamera to RechargeCamera when timeout batteryRechargeTime [
		cameraBattery + 1 <= MAXIMUM_BATTERY] / cameraBattery := cameraBattery + 1;
	transition from InitOfcameraOfcamera to OperatingOfcamera
	transition from OperationEntryOfcamera to IdleOfcamera
	transition from IdleOfcamera to SenseMotionOfcamera when Camera.motion /
	raise Motion.motion(true);
	transition from SenseMotionOfcamera to CountPersonsOfcamera when Camera.personPresence
		[Camera.personPresence::count > 0] /
	lastCountOfcamera := Camera.personPresence::count;
	transition from SenseMotionOfcamera to SenseMotionOfcamera when Camera.motion
	transition from SenseMotionOfcamera to IdleOfcamera when timeout timeoutTimeOfcamera /
	raise Motion.motion(false);
	transition from CountPersonsOfcamera to CountPersonsChoiceOfcamera when Camera.personPresence
		[cameraGranularity <= calculateDifference(Camera.personPresence::count, lastCountOfcamera)] /
	lastCountOfcamera := Camera.personPresence::count;
	transition from CountPersonsChoiceOfcamera to SenseMotionOfcamera [lastCountOfcamera <= 0]
	transition from CountPersonsChoiceOfcamera to CountPersonsOfcamera [else]
	transition from OperatingOfcamera to ChargingOfcamera when cycle [isBatteryLow(cameraBattery)]
	transition from ChargingOfcamera to ChargingOfcamera when timeout batteryRechargeTimeOfcamera
		[cameraBattery + 1 <= MAXIMUM_BATTERY] /
	cameraBattery := cameraBattery + 1;
	transition from ChargingOfcamera to OperatingOfcamera when cycle [isBatteryMedium(cameraBattery)]
	transition from InitOfmotionDetectorOfmotionDetector to OnOfmotionDetector
	transition from OperationEntryOfmotionDetector to IdleOfmotionDetector
	transition from IdleOfmotionDetector to SensedMotionOfmotionDetector when MotionDetector.motion /
	raise Motion.motion(true);
	transition from SensedMotionOfmotionDetector to SensedMotionOfmotionDetector when
		MotionDetector.motion
	transition from SensedMotionOfmotionDetector to IdleOfmotionDetector when timeout
		timeoutTimeOfmotionDetector /
	raise Motion.motion(false);
	transition from SelfDefenseEntryOfmotionDetector to CountOfmotionDetector
	transition from CountOfmotionDetector to SelfDefenseChoiceOfmotionDetector when
		MotionDetector.motion [selfDefence] /
	relayedMotionCountOfmotionDetector := relayedMotionCountOfmotionDetector + 1;
	transition from SelfDefenseChoiceOfmotionDetector to CountOfmotionDetector
		[relayedMotionCountOfmotionDetector < MAXIMUM_RELAYED_MOTION_COUNT]
	transition from SelfDefenseChoiceOfmotionDetector to TemporarilyIdleOfmotionDetector [else]
	transition from CountOfmotionDetector to CountOfmotionDetector when timeout
		expectedDelayTimeOfmotionDetector [selfDefence] /
	relayedMotionCountOfmotionDetector := relayedMotionCountOfmotionDetector - 1;
	transition from TemporarilyIdleOfmotionDetector to OnOfmotionDetector when timeout
		temporarilyIdleTimeOfmotionDetector /
	relayedMotionCountOfmotionDetector := 0;
	transition from InitOfventilatorOfventilator to VentilationOnOfventilator
	transition from VentilationOffOfventilator to VentilationOnOfventilator when Motion.motion
		[Motion.motion::on]
	transition from VentilationOnOfventilator to VentilationOffOfventilator when Motion.motion [not
		Motion.motion::on]
	transition from OnEntryOfventilator to BaseVentilationOfventilator
	transition from BaseVentilationOfventilator to FixVentilationOfventilator when
		Motion.personPresence
	transition from FixVentilationOfventilator to DecreasingVentilationOfventilator when timeout
		firstVentilationChangeTimeOfventilator
	transition from DecreasingVentilationOfventilator to FixVentilationOfventilator when
		Motion.personPresence
	transition from DecreasingVentilationOfventilator to VentilationChoiceOfventilator when timeout
		ventilationChangeTimeOfventilator
	transition from VentilationChoiceOfventilator to BaseVentilationOfventilator
		[ventilationLevelOfventilator - VENTILATION_DELTA <= BASE_VENTILATION]
	transition from VentilationChoiceOfventilator to DecreasingVentilationOfventilator [else] /
	ventilationLevelOfventilator := ventilationLevelOfventilator - VENTILATION_DELTA;
	transition from BaseVentilationOfventilator to VentilationOffOfventilator when timeout
		switchOffTimeOfventilator
	transition from InitOfswitchOfswitch to VentilationOnOfswitch
	transition from VentilationOffOfswitch to VentilationOnOfswitch when Motion.motion
		[Motion.motion::on]
	transition from VentilationOnOfswitch to VentilationOffOfswitch when Motion.motion [not
		Motion.motion::on]
	////
	
	lambda canReconfigure() : boolean := 
		(isCameraAvailable() or !MotionDetectorState.unavailability::unavailable) and
			(!VentilatorState.unavailability::unavailable or !SwitchState.unavailability::unavailable)
	
	lambda isCameraAvailable() : boolean := 
		!CameraState.unavailability::unavailable and !isBatteryLow(cameraBattery)
		
}