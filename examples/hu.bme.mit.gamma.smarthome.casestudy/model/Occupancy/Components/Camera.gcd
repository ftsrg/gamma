package occupancy

import "Interfaces/Constants.gcd"
import "Interfaces/Interfaces.gcd"

@TransitionPriority = order-based
statechart Camera [
	port Camera : requires Camera
	port MotionDetector : requires MotionDetector
	port Motion : provides Motion
] {
	timeout timeoutTime // To turn off lightning automatically
	timeout batteryRechargeTime
	
	// Read and written by controller, too
	var battery : integer := 80
	var granularity : integer := BASE_GRANULARITY
	//
	var lastCount : integer := 0
	
	region main {
		initial Entry
		state Operating {
			exit / lastCount := 0;
			region operationRegion {
				initial OperationEntry
				state Idle
				state SenseMotion {
					entry / set timeoutTime := TIMEOUT_TIME s;
						lastCount := 0;
				}
				state CountPersons {
					entry / raise Motion.personPresence(lastCount);
						battery := battery - calculateBatteryDrownage(granularity);
				}
				choice CountPersonsChoice
			}
		}
		state Charging {
			entry / set batteryRechargeTime := BATTERY_RECHARGE_TIME s;
		}
	}
	
	transition from Entry to Operating
	
	transition from OperationEntry to Idle
	transition from Idle to SenseMotion when MotionDetector.motion /
		raise Motion.motion(true);
	transition from SenseMotion to CountPersons when Camera.personPresence [
		Camera.personPresence::count > 0 and Camera.personPresence::count < 10] /
		lastCount := Camera.personPresence::count;
	transition from SenseMotion to SenseMotion when MotionDetector.motion
	transition from SenseMotion to Idle when timeout timeoutTime /
		raise Motion.motion(false);
	transition from CountPersons to CountPersonsChoice when Camera.personPresence [
		Camera.personPresence::count > 0 and Camera.personPresence::count < 10 and
		granularity <= calculateDifference(Camera.personPresence::count, lastCount)] /
		lastCount := Camera.personPresence::count;
	transition from CountPersonsChoice to SenseMotion [lastCount <= 0]
	transition from CountPersonsChoice to CountPersons [else]
	
	transition from Operating to Charging when cycle [isBatteryLow(battery)]
	transition from Charging to Charging when timeout batteryRechargeTime [battery + 1 <= MAXIMUM_BATTERY] /
		battery := battery + 1;
	
	transition from Charging to Operating when cycle [isBatteryMedium(battery)]
}