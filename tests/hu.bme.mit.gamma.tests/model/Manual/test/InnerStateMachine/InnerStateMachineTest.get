import "model/InnerStateMachine/InnerStateMachineWrapper"

trace InnerStateMachineTest of InnerStateMachineWrapper
step {
	act {
		reset
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Init;
	}
}
step {
	act {
		raise portA.message_bool(false)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Other;
		variable innerStateMachine._innerStateMachine_Other_ = _InnerStateMachine_Other_::Other_Init;
	}
}
step {
	act {
		raise portA.message_bool(true)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Init;
	}
}
step {
	act {
		raise portA.message_bool(true)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Other;
		variable innerStateMachine._innerStateMachine_Other_ = _InnerStateMachine_Other_::Other_Init;
	}
}
step {
	act {
		raise portA.message_bool(false)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Other;
		variable innerStateMachine._innerStateMachine_Other_ = _InnerStateMachine_Other_::Other_Other;
	}
}
step {
	act {
		raise portA.message_bool(false)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Other;
		variable innerStateMachine._innerStateMachine_Other_ = _InnerStateMachine_Other_::Other_Init;
	}
}
step {
	act {
		raise portA.message_bool(false)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Other;
		variable innerStateMachine._innerStateMachine_Other_ = _InnerStateMachine_Other_::Other_Other;
	}
}
step {
	act {
		raise portA.message_bool(true)
		schedule component
	}
	assert {
		variable innerStateMachine._innerStateMachine_ = _InnerStateMachine_::Init;
	}
}