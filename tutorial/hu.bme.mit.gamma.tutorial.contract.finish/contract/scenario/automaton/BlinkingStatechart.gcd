package blinking
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Interfaces/Interfaces.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Crossroad.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/scenario/automaton/InitStatechart.gcd"
import
	"/hu.bme.mit.gamma.tutorial.contract.finish/contract/scenario/automaton/BlinkingStatechart.gcd"
import
	"/hu.bme.mit.gamma.tutorial.contract.finish/contract/scenario/automaton/NormalStatechart.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Init.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Blinking.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Normal.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/adaptive/Crossroads.gcd"
@TransitionPriority = value-based
@HasInitialOutputsBlock
@ScenarioContractStatechart = Crossroads (permissive)
statechart Blinking [
	port police : requires PoliceInterrupt
	port policeReversed : provides PoliceInterrupt
	port priorityOutput : provides LightCommands
	port priorityOutputReversed : requires LightCommands
	port secondaryOutput : provides LightCommands
	port secondaryOutputReversed : requires LightCommands
] {
	timeout delay0
	timeout delay1
	timeout delay2
	timeout delay3
	region ^region {
		initial Initial
		state firstState
		state hotComponentViolation
		state state0 {
			entry /
			set delay0 := 500 ms;
			set delay1 := 501 ms;
		}
		state state1 {
			entry /
			set delay2 := 500 ms;
			set delay3 := 501 ms;
		}
		@SpecialStateAnnotation accepting
		state AcceptingState
	}
	transition from Initial to firstState
	transition (3) from firstState to state0 when priorityOutputReversed.displayYellow &&
		secondaryOutputReversed.displayYellow /
	raise priorityOutput.displayYellow;
	raise secondaryOutput.displayYellow;
	transition (1) from firstState to hotComponentViolation when priorityOutputReversed.any ||
		secondaryOutputReversed.any
	transition (3) from state0 to state1 when !(timeout delay1) && timeout delay0 &&
		priorityOutputReversed.displayNone && secondaryOutputReversed.displayNone
	/
	raise priorityOutput.displayNone;
	raise secondaryOutput.displayNone;
	transition (1) from state0 to hotComponentViolation when timeout delay1 ||
		priorityOutputReversed.any || secondaryOutputReversed.any
	transition (3) from state1 to AcceptingState when !(timeout delay3) && timeout delay2 &&
		priorityOutputReversed.displayYellow && secondaryOutputReversed.displayYellow
	/
	raise priorityOutput.displayYellow;
	raise secondaryOutput.displayYellow;
	transition (1) from state1 to hotComponentViolation when timeout delay3 ||
		priorityOutputReversed.any || secondaryOutputReversed.any
}