package init
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Interfaces/Interfaces.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Crossroad.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/scenario/automaton/InitStatechart.gcd"
import
	"/hu.bme.mit.gamma.tutorial.contract.finish/contract/scenario/automaton/BlinkingStatechart.gcd"
import
	"/hu.bme.mit.gamma.tutorial.contract.finish/contract/scenario/automaton/NormalStatechart.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Init.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Blinking.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Normal.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/adaptive/Crossroads.gcd"
@TransitionPriority = value-based
@HasInitialOutputsBlock
@ScenarioContractStatechart = Crossroads (permissive)
statechart Init [
	port police : requires PoliceInterrupt
	port policeReversed : provides PoliceInterrupt
	port priorityOutput : provides LightCommands
	port priorityOutputReversed : requires LightCommands
	port secondaryOutput : provides LightCommands
	port secondaryOutputReversed : requires LightCommands
] {
	region ^region {
		initial Initial
		state firstState
		state hotComponentViolation
		state state0
		@SpecialStateAnnotation accepting
		state AcceptingState
	}
	transition from Initial to firstState
	transition (3) from firstState to state0 when priorityOutputReversed.displayRed &&
		secondaryOutputReversed.displayRed /
	raise priorityOutput.displayRed;
	raise secondaryOutput.displayRed;
	transition (1) from firstState to firstState when priorityOutputReversed.displayYellow ||
		priorityOutputReversed.displayGreen || priorityOutputReversed.displayNone ||
		secondaryOutputReversed.displayYellow || secondaryOutputReversed.displayGreen ||
		secondaryOutputReversed.displayNone
	transition (3) from state0 to AcceptingState when priorityOutputReversed.displayGreen /
	raise priorityOutput.displayGreen;
	transition (1) from state0 to hotComponentViolation when priorityOutputReversed.displayRed ||
		priorityOutputReversed.displayYellow || priorityOutputReversed.displayNone ||
		secondaryOutputReversed.any
}