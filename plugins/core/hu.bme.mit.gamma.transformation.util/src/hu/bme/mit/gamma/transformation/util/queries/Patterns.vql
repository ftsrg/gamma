/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.transformation.util.queries

import "http://www.mit.bme.hu/gamma/expression/Model"
import "http://www.mit.bme.hu/gamma/action/Model"
import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart"
import "http://www.mit.bme.hu/gamma/statechart/Model/Composite"
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface"

// Simple Queries

pattern subregions(region : Region, name : java String) {
	State.regions(_, region);
	Region.name(region, name);
}

pattern regions(region: Region, name : java String) {
	find topRegions(_, region, name);
} or {
	find subregions(region, name);
}

// Composite queries 
pattern parameterizedInstances(instance : ComponentInstance) {
	ComponentInstance.arguments(instance, _); 
}

pattern parameterizedInstancesWithParameters(instance : ComponentInstance, type : Component, parameter  : ParameterDeclaration) {
	SynchronousComponentInstance.arguments(instance, _);
	SynchronousComponentInstance.type(instance, type);
	Component.parameterDeclarations(type, parameter);
} or {
	AsynchronousComponentInstance.arguments(instance, _);
	AsynchronousComponentInstance.type(instance, type);
	Component.parameterDeclarations(type, parameter);
}

pattern simpleInstances(instance : SynchronousComponentInstance, statechart : StatechartDefinition) {
	SynchronousComponentInstance.type(instance, statechart); 
}

pattern instanceContainer(containerInstace : SynchronousComponentInstance, instance : SynchronousComponentInstance) {
	SynchronousComponentInstance.type(containerInstace, type);
	AbstractSynchronousCompositeComponent.components(type, instance);
}

pattern referencedDeclarations(declaration : NamedElement) {
	DirectReferenceExpression.declaration(_, declaration);
} or {
	TimeoutEventReference.timeout(_, declaration);
}

pattern instanceVariables(instance : SynchronousComponentInstance, variable : VariableDeclaration) {
	find simpleInstances(instance, statechart);
	StatechartDefinition.variableDeclarations(statechart, variable);
	find referencedDeclarations(variable);
}

pattern instanceTimeouts(instance : SynchronousComponentInstance, timeout : TimeoutDeclaration) {
	find simpleInstances(instance, statechart);
	StatechartDefinition.timeoutDeclarations(statechart, timeout);
	find referencedDeclarations(timeout);
}

// To filter out events that are not used
private pattern relevantEvents(port : Port, event : Event) {
	PortEventReference.port(portEventReference, port);
	PortEventReference.event(portEventReference, event);
} or {
	Port.interfaceRealization.interface.events.event(port, event);
	AnyPortEventReference.port(_, port);
} or {
	RaiseEventAction.port(raiseEventAction, port);
	RaiseEventAction.event(raiseEventAction, event);
} or {
	EventParameterReferenceExpression.port(reference, port);
	EventParameterReferenceExpression.event(reference, event);
}

private pattern eventDirection(eventDeclaration : EventDeclaration, direction : EventDirection) {
	 EventDeclaration.direction(eventDeclaration, direction);
}

private pattern componentDeclarationEvents(type : Component, port : Port, realizationMode : RealizationMode, eventDeclaration : EventDeclaration, event : Event) {
	Component.ports(type, port);
	Port.interfaceRealization(port, interfaceRealization);
	InterfaceRealization.realizationMode(interfaceRealization, realizationMode);
	InterfaceRealization.interface(interfaceRealization, interface);
	find parentInterfaces*(interface, parentOrSameInterface);
	Interface.events(parentOrSameInterface, eventDeclaration);
	EventDeclaration.event(eventDeclaration, event);
}

pattern inputInstanceEvents(instance : SynchronousComponentInstance, port : Port, event : Event) {
	find simpleInstances(instance, statechart);
	find componentDeclarationEvents(statechart, port, RealizationMode::PROVIDED, eventDeclaration, event);
	// OUT events are NOT returned
	neg find eventDirection(eventDeclaration, EventDirection::OUT);
	find relevantEvents(port, event); // Only relevant events
} or {
	find simpleInstances(instance, statechart);
	find componentDeclarationEvents(statechart, port, RealizationMode::REQUIRED, eventDeclaration, event);
	// IN events are NOT returned
	neg find eventDirection(eventDeclaration, EventDirection::IN);
	find relevantEvents(port, event); // Only relevant events
}

private pattern outputInstanceEvents(instance : SynchronousComponentInstance, port : Port, event : Event) {
	find simpleInstances(instance, statechart);
	find componentDeclarationEvents(statechart, port, RealizationMode::PROVIDED, eventDeclaration, event);
	// IN events are NOT returned
	neg find eventDirection(eventDeclaration, EventDirection::IN);
} or {
	find simpleInstances(instance, statechart);
	find componentDeclarationEvents(statechart, port, RealizationMode::REQUIRED, eventDeclaration, event);
	// OUT events are NOT returned
	neg find eventDirection(eventDeclaration, EventDirection::OUT);
}

pattern parameteredEvents(event : Event, param : ParameterDeclaration) {
	Event.parameterDeclarations(event, param);
}

private pattern portBindings(composite : CompositeComponent, systemPort : Port, instance : ComponentInstance, instancePort : Port) {
	CompositeComponent.portBindings(composite, portBinding);
	PortBinding.compositeSystemPort(portBinding, systemPort);
	PortBinding.instancePortReference(portBinding, instancePortRef);
	InstancePortReference.instance(instancePortRef, instance);
	InstancePortReference.port(instancePortRef, instancePort);
}

/**
 * Needed in the traversal of the port binding hierarchy, so traversal is made through the correct instances only.
 */
private pattern instPortRefToInstPortRef(superInstPortRef : InstancePortReference, instPortRef : InstancePortReference) {
	InstancePortReference.instance(superInstPortRef, _instance);
	InstancePortReference.port(superInstPortRef, superPort);
	PortBinding.compositeSystemPort(binding, superPort);
	PortBinding.instancePortReference(binding, instPortRef);
}

// This should be used instead of only portToPort
private pattern portToInstancePort(systemPort : Port, instance : ComponentInstance, port : Port) {
	PortBinding.compositeSystemPort(binding, systemPort);
	PortBinding.instancePortReference(binding, superInstancePortRef);
	find instPortRefToInstPortRef+(superInstancePortRef, instancePortRef);
	InstancePortReference.instance(instancePortRef, instance);
	InstancePortReference.port(instancePortRef, port);
} or {
	// Needed here?
	find portBindings(_, systemPort, instance, port);
}

private pattern syncCompositeSystemInEvents(composite : AbstractSynchronousCompositeComponent, systemPort : Port, instance : SynchronousComponentInstance, port : Port, event : Event) {
	find portBindings(composite, systemPort, instance, port);
	find inputInstanceEvents(instance, port, event);
} or {
	// Finding embedded composite systems and the port of simple instances
	AbstractSynchronousCompositeComponent.ports(composite, systemPort);
	find portToInstancePort(systemPort, instance, port);
	find inputInstanceEvents(instance, port, event);
}

pattern topSyncSystemInEvents(component : SynchronousComponent, systemPort : Port, instance : SynchronousComponentInstance, port : Port, event : Event) {
	find topSyncComponents(component);
	find syncCompositeSystemInEvents(component, systemPort, instance, port, event);
	// Filtering out unused event
	find relevantEvents(port, event);
}  or {
	// Statechart wrapped by wrapper
	find topSyncComponents(component);
	SynchronousComponentInstance.type(instance, component);	
	find inputInstanceEvents(instance, port, event);
	systemPort == port;
	// Filtering out unused event
	find relevantEvents(port, event);
}

pattern wrapperTopSyncSystemInEvents(component : SynchronousComponent, systemPort : Port, event : Event) {
	find topSyncSystemInEvents(component, systemPort, _instance, _port, event);
}

private pattern syncCompositeSystemOutEvents(composite : AbstractSynchronousCompositeComponent, systemPort : Port, instance : SynchronousComponentInstance, port : Port, event : Event) {
	find portBindings(composite, systemPort, instance, port);
	find outputInstanceEvents(instance, port, event);
} or {
	// Finding embedded composite systems and the port of simple instances
	AbstractSynchronousCompositeComponent.ports(composite, systemPort);
	find portToInstancePort(systemPort, instance, port);
	find outputInstanceEvents(instance, port, event);
}

pattern topSyncSystemOutEvents(component : SynchronousComponent, systemPort : Port, instance : SynchronousComponentInstance, port : Port, event : Event) {
	// Abstract synchronous composite
	find topSyncComponents(component);
	find syncCompositeSystemOutEvents(component, systemPort, instance, port, event);
} or {
	// Statechart wrapped by wrapper
	find topSyncComponents(component);
	SynchronousComponentInstance.type(instance, component);	
	find outputInstanceEvents(instance, port, event);
	systemPort == port;
}

private pattern instanceTopRegions(instance : SynchronousComponentInstance, topRegion : Region) {
	find simpleInstances(instance, statechart);
	StatechartDefinition.regions(statechart, topRegion);
}

pattern instanceRegions(instance : SynchronousComponentInstance, region : Region) {
	find instanceTopRegions(instance, region);
} or {
	find instanceTopRegions(instance, topRegion);
	find regionToSubregion+(topRegion, region);
}

pattern toLowerInstanceTransitions(instance : SynchronousComponentInstance, source : StateNode, target : StateNode, transition : Transition, region : Region) {
	find simpleInstances(instance, statechart);
	StatechartDefinition.transitions(statechart, transition);
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
	find substatesOfCompositeState+(targetAncestor, target);
	Region.stateNodes(region, targetAncestor);
	Region.stateNodes(region, source);
}

pattern toHigherInstanceTransitions(instance : SynchronousComponentInstance, source : StateNode, target : StateNode, transition : Transition, region : Region) {
	find simpleInstances(instance, statechart);
	StatechartDefinition.transitions(statechart, transition);
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
	find substatesOfCompositeState+(sourceAncestor, source);
	Region.stateNodes(region, sourceAncestor);
	Region.stateNodes(region, target);
}

pattern statechartRegions(statechart : StatechartDefinition, region: Region, name : java String) {
	find topRegions(statechart, region, name);
} or {
	StatechartDefinition.regions(statechart, topRegion);
	find regionToSubregion+(topRegion, region);
	Region.name(region, name);
}

pattern topRegions(statechart : StatechartDefinition, region : Region, name : java String) {
	StatechartDefinition.regions(statechart, region);
	Region.name(region, name);
}

pattern regionToSubregion(region : Region, subregion : Region) {
	Region.stateNodes(region, state);
	State.regions(state, subregion);
}

private pattern substatesOfCompositeState(compositeState : State, substate : StateNode) {
	State.regions(compositeState, region);
	Region.stateNodes(region, substate);
}

private pattern channelProvided(channel : Channel , outInstance : ComponentInstance, outPort : Port, raisedEvent : Event) {
	Channel.providedPort(channel, providedPortRef);
	find instancePortReferences(providedPortRef, outInstance, outPort, raisedEvent);
}

private pattern simpleChannelRequired(channel : SimpleChannel, inInstance : ComponentInstance, inPort : Port, raisedEvent : Event) {
	SimpleChannel.requiredPort(channel, outputPortRef);
	find instancePortReferences(outputPortRef, inInstance, inPort, raisedEvent);
}

private pattern instancePortReferences(portRef : InstancePortReference, instance : ComponentInstance , port : Port, event : Event) {
	InstancePortReference.instance(portRef, instance);
	InstancePortReference.port(portRef, port);
	Port.interfaceRealization.interface.events.event(port, event);
}

/**
 * An instance port is either bound to a system port or a channel, cannot be bound to both.
 */
private pattern channels(channel : Channel, outInstance : ComponentInstance, outPort : Port, raisedEvent : Event, inInstance : ComponentInstance, inPort : Port) {
	// Events from PROV-Port to REQ-Port
	find channelProvided(channel, outInstance, outPort, raisedEvent);
	SimpleChannel.requiredPort(channel, outputPortRef);
	find instancePortReferences(outputPortRef, inInstance, inPort, raisedEvent);
	// Returning only "semantic" out events
	EventDeclaration.event(eventDeclaration, raisedEvent);
	neg find eventDirection(eventDeclaration, EventDirection::IN);
} or {
	// Events from REQ-Port to POV-Port
	find simpleChannelRequired(channel, outInstance, outPort, raisedEvent);
	SimpleChannel.providedPort(channel, outputPortRef);
	find instancePortReferences(outputPortRef, inInstance, inPort, raisedEvent);
	// Returning only "semantic" out events
	EventDeclaration.event(decl, raisedEvent);
	neg find eventDirection(decl, EventDirection::OUT);
} or {
	// Events from BROADCAST-Port to REQ-Ports
	find channelProvided(channel, outInstance, outPort, raisedEvent);
	BroadcastChannel.requiredPorts(channel, outputPortRef);
	find instancePortReferences(outputPortRef, inInstance, inPort, raisedEvent);
	// Returning only "semantic" out events
	EventDeclaration.event(eventDeclaration, raisedEvent);
	neg find eventDirection(eventDeclaration, EventDirection::IN);
}

// This should be user for finding channel endpoints
pattern simpleInstanceChannelEndings(channel : Channel, outInstance : SynchronousComponentInstance,
	 outPort : Port, raisedEvent : Event, inInstance : SynchronousComponentInstance, inPort : Port) {
	// Both instances are simple
	find channels(channel, outInstance_, outPort, raisedEvent, inInstance_, inPort);
	find instanceToSimpleInstance(outInstance_, outInstance); // To handle adapter.statechartPort
	find simpleInstances(outInstance, _);
	find instanceToSimpleInstance(inInstance_, inInstance); // To handle adapter.statechartPort
	find inputInstanceEvents(inInstance, inPort, raisedEvent);
} or {
	// Output instance simple, input instance composite	
	find simpleInstances(outInstance, statechart1);
	Component.ports(statechart1, outPort);
	find portToInstancePort(outSytemPort, outInstance, outPort);
	find channels(channel, _outCompositeInstance, outSytemPort, raisedEvent, inInstance_, inPort);
	find instanceToSimpleInstance(inInstance_, inInstance); // To handle adapter.statechartPort
	find inputInstanceEvents(inInstance, inPort, raisedEvent);
} or {
	// Input instance simple, output instance composite
	find simpleInstances(outInstance, _);
	find instanceToSimpleInstance(outInstance_, outInstance); // To handle adapter.statechartPort
	find channels(channel, outInstance_, outPort, raisedEvent, _inCompositeInstance, inSystemPort);
	find portToInstancePort(inSystemPort, inInstance, inPort);
	find inputInstanceEvents(inInstance, inPort, raisedEvent);
} or {
	// Both instances are composite
	find simpleInstances(outInstance, statechart1);
	Component.ports(statechart1, outPort);
	find portToInstancePort(outSystemPort, outInstance, outPort);	
	find channels(channel, _outCompositeInstance, outSystemPort, raisedEvent, _inCompositeInstance, inSystemPort);
	find portToInstancePort(inSystemPort, inInstance, inPort);
	find inputInstanceEvents(inInstance, inPort, raisedEvent);
}

// The following patterns should all have simple instance ending for both ends

// State entry event raisings

private pattern raiseEventEntryActions(state : State, entryAction : RaiseEventAction, raisedEvent : Event, port : Port) {
	State.entryActions(state, entryAction);
	RaiseEventAction.event(entryAction, raisedEvent);
	RaiseEventAction.port(entryAction, port);
}

// For the raising of events connected to another instance on state entry
pattern raiseInstanceEventStateEntryActions(state : State, entryAction : RaiseEventAction, outInstance : SynchronousComponentInstance,
	 outPort : Port, raisedEvent : Event, inInstance : SynchronousComponentInstance, inPort : Port) {
	find raiseEventEntryActions(state, entryAction, raisedEvent, outPort);
	find simpleInstanceChannelEndings(_channel, outInstance, outPort, raisedEvent, inInstance, inPort);
}

// Same for top level sync components
pattern raiseTopSystemEventStateEntryActions(component : SynchronousComponent, state : State,
	instance : SynchronousComponentInstance, raisedEvent : Event, outPort : Port, entryAction : RaiseEventAction) {
	find raiseEventEntryActions(state, entryAction, raisedEvent, outPort);
	find topSyncSystemOutEvents(component, _systemPort, instance, outPort, raisedEvent);
}

// State exit event raisings

private pattern raiseEventActions(action : RaiseEventAction, port : Port, event : Event) {
	RaiseEventAction.event(action, event);
	RaiseEventAction.port(action, port);
}

private pattern raiseEventExitActions(state : State, exitAction : RaiseEventAction, raisedEvent : Event, port : Port) {
	State.exitActions(state, exitAction);
	RaiseEventAction.event(exitAction, raisedEvent);
	RaiseEventAction.port(exitAction, port);
}

// For the raising of events connected to another instance on state exit
pattern raiseInstanceEventStateExitActions(state : State, exitAction : RaiseEventAction, outInstance : SynchronousComponentInstance,
	 outPort : Port, raisedEvent : Event, inInstance : SynchronousComponentInstance, inPort : Port) {
	find raiseEventExitActions(state, exitAction, raisedEvent, outPort);
	find simpleInstanceChannelEndings(_channel, outInstance, outPort, raisedEvent, inInstance, inPort);
}

// Same for top level sync components
pattern raiseTopSystemEventStateExitActions(component : SynchronousComponent, state : State,
	instance : SynchronousComponentInstance, outPort : Port, raisedEvent : Event, exitAction : RaiseEventAction) {
	find raiseEventExitActions(state, exitAction, raisedEvent, outPort);
	find topSyncSystemOutEvents(component, _systemPort, instance, outPort, raisedEvent);
}

// Transition event raisings

private pattern raiseEventTransitionEffects(transition : Transition, eventRaiseAction : RaiseEventAction, raisedEvent : Event, port : Port) {
	Transition.effects(transition, effect);
	find actionToAction*(effect, eventRaiseAction); // To get through blocks
	RaiseEventAction.event(eventRaiseAction, raisedEvent);
	RaiseEventAction.port(eventRaiseAction, port);
}

private pattern actionToAction(parent : Action, child : Action) {
	Block.actions(parent, child);
}

// For the raising of events connected to another instance on transitions
pattern raiseInstanceEventOfTransitions(transition : Transition, eventRaiseAction : RaiseEventAction, outInstance : SynchronousComponentInstance,
	 outPort : Port, raisedEvent : Event, inInstance : SynchronousComponentInstance, inPort : Port) {
	find raiseEventTransitionEffects(transition, eventRaiseAction, raisedEvent, outPort);
	find simpleInstanceChannelEndings(_channel, outInstance, outPort, raisedEvent, inInstance, inPort);
}

// Same for top level sync components
pattern raiseTopSystemEventOfTransitions(component : SynchronousComponent, transition : Transition,
	instance : SynchronousComponentInstance, outPort : Port, raisedEvent : Event, eventRaiseAction : RaiseEventAction) {
	find raiseEventTransitionEffects(transition, eventRaiseAction, raisedEvent, outPort);
	find topSyncSystemOutEvents(component, _systemPort, instance, outPort, raisedEvent);
}

// Scheduling of synchronous components

private pattern synchronousInstanceContainer(containerInstace : SynchronousComponentInstance, instance : SynchronousComponentInstance) {
	SynchronousComponentInstance.type(containerInstace, type);
	SynchronousCompositeComponent.components(type, instance);
}

pattern queueSwapInstancesOfComposite(topComposite : SynchronousCompositeComponent, instance : SynchronousComponentInstance) {
	// Multiple level composite components
	SynchronousCompositeComponent.components(topComposite, topInstance);
	find synchronousInstanceContainer+(topInstance, instance);
	find simpleInstances(instance, _);
} or {
	// Single level composite components
	SynchronousCompositeComponent.components(topComposite, instance);
	find simpleInstances(instance, _);
}

// Choosing the top level components: sync, wrapper and async

private pattern synchronousInstances(instance : SynchronousComponentInstance, type : SynchronousComponent) {
	SynchronousComponentInstance.type(instance, type);
}

private pattern asynchronousInstances(instance : AsynchronousComponentInstance, type : AsynchronousComponent) {
	AsynchronousComponentInstance.type(instance, type);
}

pattern asynchronousSimpleInstances(instance : AsynchronousComponentInstance, type : AsynchronousAdapter) {
	AsynchronousComponentInstance.type(instance, type);
}

private pattern instanceToSimpleInstance(instance : ComponentInstance, simpleInstance : SynchronousComponentInstance) {
	AsynchronousComponentInstance.type(instance, type);
	AsynchronousAdapter.wrappedComponent(type, simpleInstance);
	find simpleInstances(simpleInstance, _);
} or {
	instance == simpleInstance;
	find simpleInstances(simpleInstance, _);
}

private pattern wrappers(wrapper : AsynchronousAdapter, synchronousType : SynchronousComponent) {
	AsynchronousAdapter.wrappedComponent.type(wrapper, synchronousType);
}

private pattern topSyncComponents(component : SynchronousComponent) {
	neg find synchronousInstances(_, component);
} or {
	find wrappers(_, component);
}

pattern topUnwrappedSyncComponents(syncComposite : AbstractSynchronousCompositeComponent) {
	neg find synchronousInstances(_, syncComposite);
	neg find wrappers(_, syncComposite);
}

pattern topWrapperComponents(wrapper : AsynchronousAdapter, composite : SynchronousComponent) {
	neg find asynchronousInstances(_, wrapper);
	find wrappers(wrapper, composite);
}

pattern topAsyncCompositeComponents(asyncComposite : AbstractAsynchronousCompositeComponent) {
	neg find asynchronousInstances(_, asyncComposite);
}

// Choosing all the asynchronous wrapper component

pattern simpleWrapperInstances(instance : AsynchronousComponentInstance, wrapper : AsynchronousAdapter, component : SynchronousComponent) {
	AsynchronousComponentInstance.type(instance, wrapper);
	find wrappers(wrapper, component);
}

// In events of wrappers

pattern distinctWrapperInEvents(wrapper : AsynchronousAdapter, port : Port, event : Event) {
	// This is not delegated, these events and ports are on the wrapper
	find wrappers(wrapper, _);
	find componentDeclarationEvents(wrapper, port, RealizationMode::PROVIDED, eventDeclaration, event);
	// OUT events are NOT returned
	neg find eventDirection(eventDeclaration, EventDirection::OUT);
} or {
	// This is not delegated, these events and ports are on the wrapper
	find wrappers(wrapper, _);
	find componentDeclarationEvents(wrapper, port, RealizationMode::REQUIRED, eventDeclaration, event);
	// IN events are NOT returned
	neg find eventDirection(eventDeclaration, EventDirection::IN);
}

pattern wrapperInEvents(wrapper : AsynchronousAdapter, port : Port, event : Event) {
	// This is delegated down to the events and ports of sync instances
	find wrappers(wrapper, component);
	find topSyncSystemInEvents(component, port, _instance, _instancePort, event);
} or {
	find distinctWrapperInEvents(wrapper, port, event);
}

pattern wrapperInstanceInEvents(instance : AsynchronousComponentInstance, port : Port, event : Event) {
	find asynchronousSimpleInstances(instance, wrapper);
	find wrapperInEvents(wrapper, port, event);
}

// In events of async composites

private pattern asyncSystemInEvents(composite : AbstractAsynchronousCompositeComponent, systemPort : Port,
	instance : AsynchronousComponentInstance, port : Port, event : Event) {
	find portBindings(composite, systemPort, instance, port);
	find wrapperInstanceInEvents(instance, port, event);
} or {
	// Finding embedded composite systems and the port of simple instances
	AbstractAsynchronousCompositeComponent.ports(composite, systemPort);
	find portToInstancePort(systemPort, instance, port);
	find wrapperInstanceInEvents(instance, port, event);
}

pattern topAsyncSystemInEvents(composite : AbstractAsynchronousCompositeComponent, systemPort : Port,
	instance : AsynchronousComponentInstance, port : Port, event : Event) {
	find topAsyncCompositeComponents(composite);
	find asyncSystemInEvents(composite, systemPort, instance, port, event);
}

private pattern wrapperPorts(wrapper : AsynchronousAdapter, port : Port) {
	AsynchronousAdapter.ports(wrapper, port);
} or {
	AsynchronousAdapter.wrappedComponent.type.ports(wrapper, port);
}

// This should be user for finding channel endpoints
private pattern simpleWrapperInstanceChannelEndings(channel : Channel, outInstance : AsynchronousComponentInstance,
	 outPort : Port, raisedEvent : Event, inInstance : AsynchronousComponentInstance, inPort : Port) {
	// Both instances are simple
	find channels(channel, outInstance, outPort, raisedEvent, inInstance, inPort);
	find simpleWrapperInstances(outInstance, _, _);
	find simpleWrapperInstances(inInstance, _, _);
} or {
	// Input instance simple, output instance composite	
	find simpleWrapperInstances(outInstance, outWrapper, _);
	find wrapperPorts(outWrapper, outPort);
	find portToInstancePort(outSytemPort, outInstance, outPort);
	find channels(channel, _outCompositeInstance, outSytemPort, raisedEvent, inInstance, inPort);
	find simpleWrapperInstances(inInstance, _, _);
} or {
	// Output instance simple, input instance composite
	find simpleWrapperInstances(outInstance, _, _);
	find channels(channel, outInstance, outPort, raisedEvent, _inCompositeInstance, inSystemPort);
	find portToInstancePort(inSystemPort, inInstance, inPort);
	find wrapperPorts(inWrapper, inPort);
	find simpleWrapperInstances(inInstance, inWrapper, _);
} or {
	// Both instances are composite
	find simpleWrapperInstances(outInstance, outWrapper, _);
	find wrapperPorts(outWrapper, outPort);
	find portToInstancePort(outSystemPort, outInstance, outPort);	
	find channels(channel, _outCompositeInstance, outSystemPort, raisedEvent, _inCompositeInstance, inSystemPort);
	find portToInstancePort(inSystemPort, inInstance, inPort);
	find wrapperPorts(inWrapper, inPort);
	find simpleWrapperInstances(inInstance, inWrapper, _);
}

pattern eventsIntoMessageQueues(outInstance : AsynchronousComponentInstance, outPort : Port, raisedEvent : Event,
	inInstance : AsynchronousComponentInstance, inPort : Port, queue : MessageQueue) {
	find simpleWrapperInstanceChannelEndings(_, outInstance, outPort, raisedEvent, inInstance, inPort);
	find instanceMessageQueues(inInstance, wrapper, queue);
	find queuesOfEvents(wrapper, queue, inPort, raisedEvent);
}

// Message queues

pattern topMessageQueues(wrapper : AsynchronousAdapter, queue : MessageQueue) {
	neg find asynchronousSimpleInstances(_, wrapper);
	AsynchronousAdapter.messageQueues(wrapper, queue);
}

pattern instanceMessageQueues(instance : AsynchronousComponentInstance, wrapper : AsynchronousAdapter, queue : MessageQueue) {
	find asynchronousSimpleInstances(instance, wrapper);
	AsynchronousAdapter.messageQueues(wrapper, queue);
}

// Events to message queues

private pattern parentInterfaces(interface : Interface, parent : Interface) {
	Interface.parents(interface, parent);
}

private pattern eventsOfPorts(port : Port, event : Event) {
	Port.interfaceRealization.interface(port, interface);
	Interface.events.event(interface, event);
} or {
	Port.interfaceRealization.interface(port, interface);
	find parentInterfaces+(interface, parentInterface);
	Interface.events.event(parentInterface, event);
}

pattern queuesOfClocks(wrapper : AsynchronousAdapter, queue : MessageQueue, clock : Clock) {
	AsynchronousAdapter.messageQueues(wrapper, queue);
	MessageQueue.eventReferences(queue, eventReference);
	ClockTickReference.clock(eventReference, clock);
}

pattern queuesOfEvents(wrapper : AsynchronousAdapter, queue : MessageQueue, port : Port, event : Event) {
	AsynchronousAdapter.messageQueues(wrapper, queue);
	MessageQueue.eventReferences(queue, eventReference);
	PortEventReference.port(eventReference, port);
	find eventsOfPorts(port, event);
	PortEventReference.event(eventReference, event);
} or {
	AsynchronousAdapter.messageQueues(wrapper, queue);
	MessageQueue.eventReferences(queue, eventReference);
	AnyPortEventReference.port(eventReference, port);
	find eventsOfPorts(port, event);
}

pattern queuesOfEventsOfWrappedComponents(wrapper : AsynchronousAdapter, queue  : MessageQueue) {
	find queuesOfEvents(wrapper, queue, port, _event);
	find wrappers(wrapper, synchronousComponent);
	Component.ports(synchronousComponent, port);
}

// Priority between queues

pattern queuePriorities(wrapper : AsynchronousAdapter, lowerPriotityQueue : MessageQueue, higherPriotityQueue : MessageQueue) {
	AsynchronousAdapter.messageQueues(wrapper, lowerPriotityQueue);
	AsynchronousAdapter.messageQueues(wrapper, higherPriotityQueue);
	MessageQueue.priority(lowerPriotityQueue, lowerPriority);
	MessageQueue.priority(higherPriotityQueue, higherPriority);
	check (lowerPriority < higherPriority);
}

// Control specification

private pattern runOnceControl(wrapper : AsynchronousAdapter, eventReference : EventReference) {
	AsynchronousAdapter.controlSpecifications(wrapper, controlSpecification);
	ControlSpecification.trigger(controlSpecification, trigger);
	ControlSpecification.controlFunction(controlSpecification, ControlFunction::RUN_ONCE);
	EventTrigger.eventReference(trigger, eventReference);
}

pattern runOnceEventControl(wrapper : AsynchronousAdapter, port : Port, event : Event) {
	find wrapperInEvents(wrapper, port, event);
	find runOnceControl(wrapper, eventReference);
	PortEventReference.port(eventReference, port);
	find eventsOfPorts(port, event);
	PortEventReference.event(eventReference, event);
} or {
	find wrapperInEvents(wrapper, port, event);
	find runOnceControl(wrapper, eventReference);
	AnyPortEventReference.port(eventReference, port);
	find eventsOfPorts(port, event);
}

pattern unusedWrapperEvents(wrapper : AsynchronousAdapter, port : Port, event : Event) {
	find distinctWrapperInEvents(wrapper, port, event);
	neg find runOnceEventControl(wrapper, port, event);
}

pattern runOnceClockControl(wrapper : AsynchronousAdapter, queue : MessageQueue, clock : Clock) {
	find runOnceControl(wrapper, eventReference);
	ClockTickReference.clock(eventReference, clock);
	find queuesOfClocks(wrapper, queue, clock);
}

// Max timeout
pattern timeoutValues(timeSpec : TimeSpecification, valueExp : Expression, unit : TimeUnit) {
	TimeSpecification.value(timeSpec, valueExp);
	TimeSpecification.unit(timeSpec, unit);
}

// Triggerable transition optimization patterns

private pattern internalPorts(port : Port) {
	Port.interfaceRealization.interface.events(port, eventDeclaration);
	EventDeclaration.direction(eventDeclaration, EventDirection::INTERNAL);
}

pattern removableTransitions(transition : Transition) {
	find transitionEventTrigger(transition, _, _); // It is important that the transition has an event trigger
	neg find triggerableTransition(transition);
}

private pattern triggerableTransition(transition : Transition) {
	find relevantEvents(outPort, raisedEvent);
	find simpleInstanceChannelEndings(_, _, outPort, raisedEvent, _, inPort);
	find transitionEventTrigger(transition, inPort, raisedEvent);
} or {
	find topSyncSystemInEvents(_, _, _, inPort, raisedEvent);
	find transitionEventTrigger(transition, inPort, raisedEvent);
} or {
	find internalPorts(internalPort);
	find transitionEventTrigger(transition, internalPort, _raisedEvent);
}

private pattern transitionEventTrigger(transition : Transition, inPort : Port, raisedEvent : Event) {
	Transition.trigger(transition, parentTrigger);
	find triggerToTriggerThroughAndTriggers(parentTrigger, trigger);
	find eventTriggers(trigger, inPort, raisedEvent);
}

private pattern triggerToTriggerThroughAndTriggers(parentTrigger : Trigger, trigger : Trigger) {
	parentTrigger == trigger;
} or {
	find andTriggerToTrigger+(parentTrigger, trigger);
}

private pattern anyBinaryTriggerToTrigger(binaryTrigger : BinaryTrigger, trigger : Trigger) {
	find binaryTriggerToTrigger(binaryTrigger, trigger, _);
}

private pattern binaryTriggerToTrigger(binaryTrigger : BinaryTrigger, trigger : Trigger, binaryType : BinaryType) {
	BinaryTrigger.type(binaryTrigger, binaryType);
	BinaryTrigger.leftOperand(binaryTrigger, trigger);
} or {
	BinaryTrigger.type(binaryTrigger, binaryType);
	BinaryTrigger.rightOperand(binaryTrigger, trigger);
}

private pattern andTriggerToTrigger(andTrigger : BinaryTrigger, trigger : Trigger) {
	find binaryTriggerToTrigger(andTrigger, trigger, BinaryType::AND);
}

private pattern eventTriggers(trigger : EventTrigger, port : Port, event : Event) {
	EventTrigger.eventReference(trigger, eventReference);
	PortEventReference.port(eventReference, port);
	PortEventReference.event(eventReference, event);
}

// Interaction coverage

private pattern triggerToTrigger(parentTrigger : Trigger, trigger : Trigger) {
	parentTrigger == trigger;
} or {
	find anyBinaryTriggerToTrigger+(parentTrigger, trigger);
}

private pattern transitionOrEventTrigger(transition : Transition, inPort : Port, raisedEvent : Event) {
	Transition.trigger(transition, parentTrigger);
	find triggerToTrigger(parentTrigger, trigger);
	find eventTriggers(trigger, inPort, raisedEvent);
}

pattern raiseInstanceEvents(raiseEventAction : RaiseEventAction, outInstance : SynchronousComponentInstance, outPort : Port, raisedEvent : Event,
		inInstance : SynchronousComponentInstance, inPort : Port, receivingTransition : Transition) {
	// Entry event
	find raiseInstanceEventStateEntryActions(_, raiseEventAction, outInstance, outPort, raisedEvent, inInstance, inPort);
	find transitionOrEventTrigger(receivingTransition, inPort, raisedEvent);
} or {
	// Exit event
	find raiseInstanceEventStateExitActions(_, raiseEventAction, outInstance, outPort, raisedEvent, inInstance, inPort);
	find transitionOrEventTrigger(receivingTransition, inPort, raisedEvent);
} or {
	// Transition event
	find raiseInstanceEventOfTransitions(_, raiseEventAction, outInstance, outPort, raisedEvent, inInstance, inPort);
	find transitionOrEventTrigger(receivingTransition, inPort, raisedEvent);
}

// Dataflow coverage

pattern expressionToExpression(from : Expression, to : Expression) {
	UnaryExpression.operand(from, to);
} or {
	BinaryExpression.leftOperand(from, to);
} or {
	BinaryExpression.rightOperand(from, to);
} or {
	MultiaryExpression.operands(from, to);
}

pattern variableDefs(reference : DirectReferenceExpression, variable : VariableDeclaration) {
	AssignmentStatement.lhs(_assignment, lhs);
	find expressionToExpression*(lhs, reference); // For potential record and array access
	DirectReferenceExpression.declaration(reference, variable);
}

pattern variableCUses(reference : DirectReferenceExpression, variable : VariableDeclaration) {
	AssignmentStatement.rhs(_assignment, rhs);
	find expressionToExpression*(rhs, reference);
	DirectReferenceExpression.declaration(reference, variable);
}

pattern variablePUses(reference : DirectReferenceExpression, variable : VariableDeclaration) {
	neg find variableDefs(reference, variable);
	neg find variableCUses(reference, variable);
	DirectReferenceExpression.declaration(reference, variable);
}

pattern variableUses(reference : DirectReferenceExpression, variable : VariableDeclaration) {
	find variableCUses(reference, variable);
} or {
	find variablePUses(reference, variable);
}

// Interaction dataflow coverage

pattern interactionCUses(raiseEventAction : RaiseEventAction, outPort : Port, inPort : Port, 
		reference : EventParameterReferenceExpression) {
	find raiseEventActions(raiseEventAction, outPort, event);
	find simpleInstanceChannelEndings(_, _, outPort, event, _, inPort);
	// The event raise does not have to be connected to a transition 
	AssignmentStatement.rhs(_assignment, rhs);
	find expressionToExpression*(rhs, reference);
	EventParameterReferenceExpression.port(reference, inPort);
	EventParameterReferenceExpression.event(reference, event);
}

pattern interactionPUses(raiseEventAction : RaiseEventAction, outPort : Port, inPort : Port, 
		reference : EventParameterReferenceExpression) {
	find raiseEventActions(raiseEventAction, outPort, event);
	find simpleInstanceChannelEndings(_, _, outPort, event, _, inPort);
	neg find interactionCUses(raiseEventAction, outPort, inPort, reference); // Not a c-use, so it must be a p-use
	EventParameterReferenceExpression.port(reference, inPort);
	EventParameterReferenceExpression.event(reference, event);
}

pattern interactionUses(raiseEventAction : RaiseEventAction, outPort : Port, inPort : Port, 
		reference : EventParameterReferenceExpression) {
	find interactionCUses(raiseEventAction, outPort, inPort, reference);
} or {
	find interactionPUses(raiseEventAction, outPort, inPort, reference);
}