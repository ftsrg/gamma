/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.trace.language.TraceLanguage with hu.bme.mit.gamma.expression.language.ExpressionLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mit.bme.hu/gamma/trace/Model" 
import "http://www.mit.bme.hu/gamma/expression/Model" as ConstraintModel
import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart" as StatechartModel
import "http://www.mit.bme.hu/gamma/statechart/Model/Composite" as CompositeModel
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface" as InterfaceModel

ExecutionTrace returns ExecutionTrace:
	'import' ^import=[InterfaceModel::Package | STRING]
	 annotations+=ExecutionTraceAnnotations*
	'trace' name=ID 'of' (component=[InterfaceModel::Component] ('(' arguments+=Expression (',' arguments+=Expression)* ')')?)
	steps+=Step
	(steps+=Step)*
	(cycle=Cycle)?
;

ExecutionTraceAnnotations returns ExecutionTraceAnnotation:
	AllowedWaitingAnnotation | NegativeTestAnnotation
;

NegativeTestAnnotation returns NegativeTestAnnotation:
	{NegativeTestAnnotation}
	'@NegativeTest'
;

AllowedWaitingAnnotation returns ExecutionTraceAllowedWaitingAnnotation:
	{ExecutionTraceAllowedWaitingAnnotation} 
	'@AllowedWaiting' lowerLimit=Expression '..' upperLimit=Expression
;

Cycle returns Cycle:
	'cycle' '{'
		(steps+=Step)+
	'}'
;

Step returns Step:
	{Step}
	'step' '{'
		('act' '{'
			(actions+=Act)+
		'}')?
		'assert' '{'
			(asserts+=Assert)*
		'}'
	'}'
;

Act returns Act:
	Reset | RaiseEventAct | TimeElapse | InstanceSchedule | ComponentSchedule;
	
Reset returns Reset:
	{Reset} 'reset'
;

RaiseEventAct returns RaiseEventAct:
	'raise' port=[InterfaceModel::Port] '.' event=[InterfaceModel::Event] ('(' arguments+=Expression (',' arguments+=Expression)* ')')?
;

TimeElapse returns TimeElapse:
	'elapse' elapsedTime=INTEGER
;

InstanceSchedule returns InstanceSchedule:
	'schedule' scheduledInstance=[CompositeModel::AsynchronousComponentInstance]
;

ComponentSchedule returns ComponentSchedule:
	{ComponentSchedule}
	'schedule' 'component'
;

Assert returns Assert:
	OrAssert
;

OrAssert returns Assert:
	XorAssert ({OrAssert.asserts+=current} ( ('||' | '|') asserts+=XorAssert)+)?
;

XorAssert returns Assert:
	AndAssert ({XorAssert.asserts+=current} ('^' asserts+=AndAssert)+)?
;

AndAssert returns Assert:
	PrimaryAssert ({AndAssert.asserts+=current} ( ('&&' | '&') asserts+=PrimaryAssert)+)?
;

PrimaryAssert returns Assert:
	RaiseEventAct  | InstanceState | NegatedAssert | '{' Assert '}'
;

NegatedAssert returns NegatedAssert:
	('!' | 'not') negatedAssert=PrimaryAssert
;

InstanceState returns InstanceState:
	InstanceStateConfiguration | InstanceVariableState
;

InstanceStateConfiguration returns InstanceStateConfiguration:
	'state' (instance=ComponentInstanceReferenceExpression | 'self') '.' region=[StatechartModel::Region] '.' state=[StatechartModel::State]
;

InstanceVariableState returns InstanceVariableState:
	variableReference=ComponentInstanceVariableReferenceExpression '=' value=Expression
;

ComponentInstanceVariableReferenceExpression returns CompositeModel::ComponentInstanceVariableReferenceExpression:
	'variable' (instance=ComponentInstanceReferenceExpression | 'self') '.' variableDeclaration=[ConstraintModel::VariableDeclaration]
;

ComponentInstanceReferenceExpression returns CompositeModel::ComponentInstanceReferenceExpression:
	componentInstance=[CompositeModel::ComponentInstance] ('->' child=ComponentInstanceReferenceExpression)?
;
