package high_level_eight_sections
import "Interface/Interfaces.gcd"
statechart HighLevelSafetyLogic [
	port Train1 : requires Train
	port SectionControl1 : provides SectionControl
	port Train2 : requires Train
	port SectionControl2 : provides SectionControl
	port Train3 : requires Train
	port SectionControl3 : provides SectionControl
	port Train4 : requires Train
	port SectionControl4 : provides SectionControl
	port Train5 : requires Train
	port SectionControl5 : provides SectionControl
	port Train6 : requires Train
	port SectionControl6 : provides SectionControl
	port Train7 : requires Train
	port SectionControl7 : provides SectionControl
	port Train8 : requires Train
	port SectionControl8 : provides SectionControl
] {
	var isOccupied1 : boolean := false
	var isDisabled1 : boolean := false
	var isOccupied2 : boolean := false
	var isDisabled2 : boolean := false
	var isOccupied3 : boolean := false
	var isDisabled3 : boolean := false
	var isOccupied4 : boolean := false
	var isDisabled4 : boolean := false
	var isOccupied5 : boolean := false
	var isDisabled5 : boolean := false
	var isOccupied6 : boolean := false
	var isDisabled6 : boolean := false
	var isOccupied7 : boolean := false
	var isDisabled7 : boolean := false
	var isOccupied8 : boolean := false
	var isDisabled8 : boolean := false
	region mainRegion {
		initial InitialState
		state GlobalState
	}
	transition from InitialState to GlobalState
	transition from GlobalState to GlobalState when Train1.occupy
		[not (isOccupied7 or isOccupied8 or
			isOccupied2 or isOccupied3)] /
		isOccupied1 := true; raise SectionControl1.enableSection;
	transition from GlobalState to GlobalState when Train1.occupy
		[isOccupied8 and not (isOccupied1 or isOccupied2 or isOccupied3)] /
		isOccupied1 := true; raise SectionControl1.enableSection;
	transition from GlobalState to GlobalState when Train1.occupy
		[isOccupied8 and (isOccupied1 or
			isOccupied2 or isOccupied3)] /
		isOccupied1 := true; isDisabled1 := true; raise SectionControl1.disableSection;
	transition from GlobalState to GlobalState when Train1.occupy
		[isOccupied2 and not (isOccupied1 or isOccupied8 or isOccupied7)] /
		isOccupied1 := true; raise SectionControl1.enableSection;
	transition from GlobalState to GlobalState when Train1.occupy
		[isOccupied2 and (isOccupied1 or
			isOccupied8 or isOccupied7)] /
		isOccupied1 := true; isDisabled1 := true; raise SectionControl1.disableSection;
	transition from GlobalState to GlobalState when Train1.unoccupy
		[isDisabled2] /
		isOccupied1 := false; isDisabled1 := false; raise SectionControl2.disableSection;
	transition from GlobalState to GlobalState when Train1.unoccupy
		[isDisabled8] /
		isOccupied1 := false; isDisabled1 := false; raise SectionControl8.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train1.unoccupy
		[isDisabled3 and not (isDisabled2 or isDisabled8)] /
		isOccupied1 := false; isDisabled3 := false;
		raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train1.unoccupy
		[isDisabled7 and not (isDisabled2 or isDisabled8)] /
		isOccupied1 := false; isDisabled7 := false;
		raise SectionControl7.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train1.unoccupy
		[not (isDisabled2 or isDisabled3 or isDisabled8 or isDisabled7)] /
		isOccupied1 := false;
	transition from GlobalState to GlobalState when Train2.occupy
		[not (isOccupied8 or isOccupied1 or
			isOccupied3 or isOccupied4)] /
		isOccupied2 := true; raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied1 and not (isOccupied2 or isOccupied3 or isOccupied4)] /
		isOccupied2 := true; raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied1 and (isOccupied2 or
			isOccupied3 or isOccupied4)] /
		isOccupied2 := true; isDisabled2 := true; raise SectionControl2.disableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied3 and not (isOccupied2 or isOccupied1 or isOccupied8)] /
		isOccupied2 := true; raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied3 and (isOccupied2 or
			isOccupied1 or isOccupied8)] /
		isOccupied2 := true; isDisabled2 := true; raise SectionControl2.disableSection;
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled3] /
		isOccupied2 := false; isDisabled2 := false; raise SectionControl3.disableSection;
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled1] /
		isOccupied2 := false; isDisabled2 := false; raise SectionControl1.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled4 and not (isDisabled3 or isDisabled1)] /
		isOccupied2 := false; isDisabled4 := false;
		raise SectionControl4.enableSection;
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled8 and not (isDisabled3 or isDisabled1)] /
		isOccupied2 := false; isDisabled8 := false;
		raise SectionControl8.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train2.unoccupy
		[not (isDisabled3 or isDisabled4 or isDisabled1 or isDisabled8)] /
		isOccupied2 := false;
	transition from GlobalState to GlobalState when Train3.occupy
		[not (isOccupied1 or isOccupied2 or
			isOccupied4 or isOccupied5)] /
		isOccupied3 := true; raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied2 and not (isOccupied3 or isOccupied4 or isOccupied5)] /
		isOccupied3 := true; raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied2 and (isOccupied3 or
			isOccupied4 or isOccupied5)] /
		isOccupied3 := true; isDisabled3 := true; raise SectionControl3.disableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied4 and not (isOccupied3 or isOccupied2 or isOccupied1)] /
		isOccupied3 := true; raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied4 and (isOccupied3 or
			isOccupied2 or isOccupied1)] /
		isOccupied3 := true; isDisabled3 := true; raise SectionControl3.disableSection;
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled4] /
		isOccupied3 := false; isDisabled3 := false; raise SectionControl4.disableSection;
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled2] /
		isOccupied3 := false; isDisabled3 := false; raise SectionControl2.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled5 and not (isDisabled4 or isDisabled2)] /
		isOccupied3 := false; isDisabled5 := false;
		raise SectionControl5.enableSection;
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled1 and not (isDisabled4 or isDisabled2)] /
		isOccupied3 := false; isDisabled1 := false;
		raise SectionControl1.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train3.unoccupy
		[not (isDisabled4 or isDisabled5 or isDisabled2 or isDisabled1)] /
		isOccupied3 := false;
	transition from GlobalState to GlobalState when Train4.occupy
		[not (isOccupied2 or isOccupied3 or
			isOccupied5 or isOccupied6)] /
		isOccupied4 := true; raise SectionControl4.enableSection;
	transition from GlobalState to GlobalState when Train4.occupy
		[isOccupied3 and not (isOccupied4 or isOccupied5 or isOccupied6)] /
		isOccupied4 := true; raise SectionControl4.enableSection;
	transition from GlobalState to GlobalState when Train4.occupy
		[isOccupied3 and (isOccupied4 or
			isOccupied5 or isOccupied6)] /
		isOccupied4 := true; isDisabled4 := true; raise SectionControl4.disableSection;
	transition from GlobalState to GlobalState when Train4.occupy
		[isOccupied5 and not (isOccupied4 or isOccupied3 or isOccupied2)] /
		isOccupied4 := true; raise SectionControl4.enableSection;
	transition from GlobalState to GlobalState when Train4.occupy
		[isOccupied5 and (isOccupied4 or
			isOccupied3 or isOccupied2)] /
		isOccupied4 := true; isDisabled4 := true; raise SectionControl4.disableSection;
	transition from GlobalState to GlobalState when Train4.unoccupy
		[isDisabled5] /
		isOccupied4 := false; isDisabled4 := false; raise SectionControl5.disableSection;
	transition from GlobalState to GlobalState when Train4.unoccupy
		[isDisabled3] /
		isOccupied4 := false; isDisabled4 := false; raise SectionControl3.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train4.unoccupy
		[isDisabled6 and not (isDisabled5 or isDisabled3)] /
		isOccupied4 := false; isDisabled6 := false;
		raise SectionControl6.enableSection;
	transition from GlobalState to GlobalState when Train4.unoccupy
		[isDisabled2 and not (isDisabled5 or isDisabled3)] /
		isOccupied4 := false; isDisabled2 := false;
		raise SectionControl2.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train4.unoccupy
		[not (isDisabled5 or isDisabled6 or isDisabled3 or isDisabled2)] /
		isOccupied4 := false;
	transition from GlobalState to GlobalState when Train5.occupy
		[not (isOccupied3 or isOccupied4 or
			isOccupied6 or isOccupied7)] /
		isOccupied5 := true; raise SectionControl5.enableSection;
	transition from GlobalState to GlobalState when Train5.occupy
		[isOccupied4 and not (isOccupied5 or isOccupied6 or isOccupied7)] /
		isOccupied5 := true; raise SectionControl5.enableSection;
	transition from GlobalState to GlobalState when Train5.occupy
		[isOccupied4 and (isOccupied5 or
			isOccupied6 or isOccupied7)] /
		isOccupied5 := true; isDisabled5 := true; raise SectionControl5.disableSection;
	transition from GlobalState to GlobalState when Train5.occupy
		[isOccupied6 and not (isOccupied5 or isOccupied4 or isOccupied3)] /
		isOccupied5 := true; raise SectionControl5.enableSection;
	transition from GlobalState to GlobalState when Train5.occupy
		[isOccupied6 and (isOccupied5 or
			isOccupied4 or isOccupied3)] /
		isOccupied5 := true; isDisabled5 := true; raise SectionControl5.disableSection;
	transition from GlobalState to GlobalState when Train5.unoccupy
		[isDisabled6] /
		isOccupied5 := false; isDisabled5 := false; raise SectionControl6.disableSection;
	transition from GlobalState to GlobalState when Train5.unoccupy
		[isDisabled4] /
		isOccupied5 := false; isDisabled5 := false; raise SectionControl4.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train5.unoccupy
		[isDisabled7 and not (isDisabled6 or isDisabled4)] /
		isOccupied5 := false; isDisabled7 := false;
		raise SectionControl7.enableSection;
	transition from GlobalState to GlobalState when Train5.unoccupy
		[isDisabled3 and not (isDisabled6 or isDisabled4)] /
		isOccupied5 := false; isDisabled3 := false;
		raise SectionControl3.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train5.unoccupy
		[not (isDisabled6 or isDisabled7 or isDisabled4 or isDisabled3)] /
		isOccupied5 := false;
	transition from GlobalState to GlobalState when Train6.occupy
		[not (isOccupied4 or isOccupied5 or
			isOccupied7 or isOccupied8)] /
		isOccupied6 := true; raise SectionControl6.enableSection;
	transition from GlobalState to GlobalState when Train6.occupy
		[isOccupied5 and not (isOccupied6 or isOccupied7 or isOccupied8)] /
		isOccupied6 := true; raise SectionControl6.enableSection;
	transition from GlobalState to GlobalState when Train6.occupy
		[isOccupied5 and (isOccupied6 or
			isOccupied7 or isOccupied8)] /
		isOccupied6 := true; isDisabled6 := true; raise SectionControl6.disableSection;
	transition from GlobalState to GlobalState when Train6.occupy
		[isOccupied7 and not (isOccupied6 or isOccupied5 or isOccupied4)] /
		isOccupied6 := true; raise SectionControl6.enableSection;
	transition from GlobalState to GlobalState when Train6.occupy
		[isOccupied7 and (isOccupied6 or
			isOccupied5 or isOccupied4)] /
		isOccupied6 := true; isDisabled6 := true; raise SectionControl6.disableSection;
	transition from GlobalState to GlobalState when Train6.unoccupy
		[isDisabled7] /
		isOccupied6 := false; isDisabled6 := false; raise SectionControl7.disableSection;
	transition from GlobalState to GlobalState when Train6.unoccupy
		[isDisabled5] /
		isOccupied6 := false; isDisabled6 := false; raise SectionControl5.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train6.unoccupy
		[isDisabled8 and not (isDisabled7 or isDisabled5)] /
		isOccupied6 := false; isDisabled8 := false;
		raise SectionControl8.enableSection;
	transition from GlobalState to GlobalState when Train6.unoccupy
		[isDisabled4 and not (isDisabled7 or isDisabled5)] /
		isOccupied6 := false; isDisabled4 := false;
		raise SectionControl4.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train6.unoccupy
		[not (isDisabled7 or isDisabled8 or isDisabled5 or isDisabled4)] /
		isOccupied6 := false;
	transition from GlobalState to GlobalState when Train7.occupy
		[not (isOccupied5 or isOccupied6 or
			isOccupied8 or isOccupied1)] /
		isOccupied7 := true; raise SectionControl7.enableSection;
	transition from GlobalState to GlobalState when Train7.occupy
		[isOccupied6 and not (isOccupied7 or isOccupied8 or isOccupied1)] /
		isOccupied7 := true; raise SectionControl7.enableSection;
	transition from GlobalState to GlobalState when Train7.occupy
		[isOccupied6 and (isOccupied7 or
			isOccupied8 or isOccupied1)] /
		isOccupied7 := true; isDisabled7 := true; raise SectionControl7.disableSection;
	transition from GlobalState to GlobalState when Train7.occupy
		[isOccupied8 and not (isOccupied7 or isOccupied6 or isOccupied5)] /
		isOccupied7 := true; raise SectionControl7.enableSection;
	transition from GlobalState to GlobalState when Train7.occupy
		[isOccupied8 and (isOccupied7 or
			isOccupied6 or isOccupied5)] /
		isOccupied7 := true; isDisabled7 := true; raise SectionControl7.disableSection;
	transition from GlobalState to GlobalState when Train7.unoccupy
		[isDisabled8] /
		isOccupied7 := false; isDisabled7 := false; raise SectionControl8.disableSection;
	transition from GlobalState to GlobalState when Train7.unoccupy
		[isDisabled6] /
		isOccupied7 := false; isDisabled7 := false; raise SectionControl6.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train7.unoccupy
		[isDisabled1 and not (isDisabled8 or isDisabled6)] /
		isOccupied7 := false; isDisabled1 := false;
		raise SectionControl1.enableSection;
	transition from GlobalState to GlobalState when Train7.unoccupy
		[isDisabled5 and not (isDisabled8 or isDisabled6)] /
		isOccupied7 := false; isDisabled5 := false;
		raise SectionControl5.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train7.unoccupy
		[not (isDisabled8 or isDisabled1 or isDisabled6 or isDisabled5)] /
		isOccupied7 := false;
	transition from GlobalState to GlobalState when Train8.occupy
		[not (isOccupied6 or isOccupied7 or
			isOccupied1 or isOccupied2)] /
		isOccupied8 := true; raise SectionControl8.enableSection;
	transition from GlobalState to GlobalState when Train8.occupy
		[isOccupied7 and not (isOccupied8 or isOccupied1 or isOccupied2)] /
		isOccupied8 := true; raise SectionControl8.enableSection;
	transition from GlobalState to GlobalState when Train8.occupy
		[isOccupied7 and (isOccupied8 or
			isOccupied1 or isOccupied2)] /
		isOccupied8 := true; isDisabled8 := true; raise SectionControl8.disableSection;
	transition from GlobalState to GlobalState when Train8.occupy
		[isOccupied1 and not (isOccupied8 or isOccupied7 or isOccupied6)] /
		isOccupied8 := true; raise SectionControl8.enableSection;
	transition from GlobalState to GlobalState when Train8.occupy
		[isOccupied1 and (isOccupied8 or
			isOccupied7 or isOccupied6)] /
		isOccupied8 := true; isDisabled8 := true; raise SectionControl8.disableSection;
	transition from GlobalState to GlobalState when Train8.unoccupy
		[isDisabled1] /
		isOccupied8 := false; isDisabled8 := false; raise SectionControl1.disableSection;
	transition from GlobalState to GlobalState when Train8.unoccupy
		[isDisabled7] /
		isOccupied8 := false; isDisabled8 := false; raise SectionControl7.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train8.unoccupy
		[isDisabled2 and not (isDisabled1 or isDisabled7)] /
		isOccupied8 := false; isDisabled2 := false;
		raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train8.unoccupy
		[isDisabled6 and not (isDisabled1 or isDisabled7)] /
		isOccupied8 := false; isDisabled6 := false;
		raise SectionControl6.enableSection;
	// Else branch
	transition from GlobalState to GlobalState when Train8.unoccupy
		[not (isDisabled1 or isDisabled2 or isDisabled7 or isDisabled6)] /
		isOccupied8 := false;
}