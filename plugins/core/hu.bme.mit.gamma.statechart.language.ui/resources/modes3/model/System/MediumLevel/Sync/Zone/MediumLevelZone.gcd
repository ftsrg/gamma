package medium_level_four_sections
import "Interface/Interfaces"
statechart MediumLevelZone [
	port Train1 : requires Train
	port SectionControl1 : provides SectionControl
	port Train2 : requires Train
	port SectionControl2 : provides SectionControl
	port Train3 : requires Train
	port SectionControl3 : provides SectionControl
	port Train4 : requires Train
	port SectionControl4 : provides SectionControl
	// Normal low level ports
	port ProtocolInCCW : requires NewProtocol
	port ProtocolInCW : requires NewProtocol
	port ProtocolOutCCW : provides NewProtocol
	port ProtocolOutCW : provides NewProtocol
] {
	var isOccupied1 : boolean := false
	var isDisabled1 : boolean := false
	var isOccupied2 : boolean := false
	var isDisabled2 : boolean := false
	var isOccupied3 : boolean := false
	var isDisabled3 : boolean := false
	var isOccupied4 : boolean := false
	var isDisabled4 : boolean := false
	var isCCWOccupied : boolean := false
	var isCWOccupied : boolean := false
	region mainRegion {
		initial InitialState
		state GlobalState
	}
	transition from InitialState to GlobalState
	transition from GlobalState to GlobalState when Train1.occupy
		[not (isCCWOccupied or isOccupied1 or isOccupied2)] /
		isOccupied1 := true; isDisabled1 := false;
			raise SectionControl1.enableSection; raise ProtocolOutCCW.occupied;
	transition from GlobalState to GlobalState when Train1.occupy
		[isCCWOccupied and not (isOccupied1 or
			isOccupied2 or isOccupied3)] /
		isOccupied1 := true; raise SectionControl1.enableSection;
			raise ProtocolOutCCW.occupied;
	transition from GlobalState to GlobalState when Train1.occupy
		[isCCWOccupied and (isOccupied1 or
			isOccupied2 or isOccupied3)] /
		isOccupied1 := true; isDisabled1 := true; raise SectionControl1.disableSection; raise ProtocolOutCCW.occupied;
	transition from GlobalState to GlobalState when Train1.occupy
		[isOccupied2 and not (isOccupied1 or isCCWOccupied)] /
		// Normal low level section protocol
		isOccupied1 := true; raise ProtocolOutCCW.occupied;
	transition from GlobalState to GlobalState when ProtocolInCCW.stop /
		// Normal low level section protocol
		isDisabled1 := true; raise SectionControl1.disableSection;
	// Because of low-level implementation: the train goes onto the disabled section
	transition from GlobalState to GlobalState when Train1.unoccupy
		[isDisabled2] /
		isOccupied1 := false; isDisabled1 := false;
			raise SectionControl2.disableSection; raise ProtocolOutCCW.unoccupied;
	// Restarting a train
	transition from GlobalState to GlobalState when Train1.unoccupy
		[isDisabled3 and not (isDisabled2)] /
		isOccupied1 := false; isDisabled3 := false;
		raise SectionControl3.enableSection; raise ProtocolOutCCW.unoccupied;
	transition from GlobalState to GlobalState when Train1.unoccupy
		[not (isDisabled3 or isDisabled2)] /
			isOccupied1 := false; raise ProtocolOutCCW.unoccupied;
	
	transition from GlobalState to GlobalState when Train2.occupy
	[not (isOccupied1 or isOccupied2 or isOccupied3)] /
	isOccupied2 := true; isDisabled2 := false; raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied1 and not (isOccupied2 or
			isOccupied3 or isOccupied4)] /
		isOccupied2 := true; raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied1 and (isOccupied2 or
			isOccupied3 or isOccupied4)] /
		isOccupied2 := true; isDisabled2 := true; raise SectionControl2.disableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied3 and not (isOccupied2 or
			isOccupied1 or isCCWOccupied)] /
		isOccupied2 := true; raise SectionControl2.enableSection;
	transition from GlobalState to GlobalState when Train2.occupy
		[isOccupied3 and (isOccupied2 or
			isOccupied1 or isCCWOccupied)] /
		isOccupied2 := true; isDisabled2 := true; raise SectionControl2.disableSection;
	// Because of low-level implementation: the train goes onto the disabled section
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled3] /
		isOccupied2 := false; isDisabled2 := false; raise SectionControl3.disableSection;
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled1] /
		isOccupied2 := false; isDisabled2 := false; raise SectionControl1.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isDisabled4 and not (isDisabled3 or isDisabled1)] /
		isOccupied2 := false; isDisabled4 := false;
		raise ProtocolOutCW.occupied;
	transition from GlobalState to GlobalState when Train2.unoccupy
		[isCCWOccupied and not (isDisabled3 or isDisabled1)] /
		isOccupied2 := false; raise ProtocolOutCCW.go;
	transition from GlobalState to GlobalState when Train2.unoccupy
		[not (isCCWOccupied or isDisabled4 or isDisabled1 or isDisabled3)] /
			isOccupied2 := false;
	
	transition from GlobalState to GlobalState when Train3.occupy
	[not (isOccupied2 or isOccupied3 or isOccupied4)] /
	isOccupied3 := true; isDisabled3 := false; raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied2 and not (isOccupied3 or
			isOccupied4 or isCWOccupied)] /
		isOccupied3 := true; raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied2 and (isOccupied3 or
			isOccupied4 or isCWOccupied)] /
		isOccupied3 := true; isDisabled3 := true; raise SectionControl3.disableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied4 and not (isOccupied3 or
			isOccupied2 or isOccupied1)] /
		isOccupied3 := true; raise SectionControl3.enableSection;
	transition from GlobalState to GlobalState when Train3.occupy
		[isOccupied4 and (isOccupied3 or
			isOccupied2 or isOccupied1)] /
		isOccupied3 := true; isDisabled3 := true; raise SectionControl3.disableSection;
	// Because of low-level implementation: the train goes onto the disabled section
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled4] /
		isOccupied3 := false; isDisabled3 := false; raise SectionControl4.disableSection;
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled2] /
		isOccupied3 := false; isDisabled3 := false; raise SectionControl2.disableSection;
	// Restarting a train
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isCWOccupied and not (isDisabled4 or isDisabled2)] /
		isOccupied3 := false; raise ProtocolOutCW.go;
	transition from GlobalState to GlobalState when Train3.unoccupy
		[isDisabled1 and not (isDisabled4 or isDisabled2)] /
		isOccupied3 := false; isDisabled1 := false;
		raise ProtocolOutCCW.occupied;
	transition from GlobalState to GlobalState when Train3.unoccupy
		[not (isDisabled1 or isCWOccupied or isDisabled2 or isDisabled4)] /
			isOccupied3 := false;
	
	transition from GlobalState to GlobalState when Train4.occupy
		[not (isOccupied3 or isOccupied4 or isCWOccupied)] /
		isOccupied4 := true; isDisabled4 := false;
			raise SectionControl4.enableSection; raise ProtocolOutCW.occupied;
	transition from GlobalState to GlobalState when Train4.occupy
		[isOccupied3 and not (isOccupied4 or isCWOccupied)] /
		// Normal low level section protocol
		isOccupied4 := true; raise ProtocolOutCW.occupied;
	transition from GlobalState to GlobalState when ProtocolInCW.stop /
		// Normal low level section protocol
		isDisabled4 := true; raise SectionControl4.disableSection;
	transition from GlobalState to GlobalState when Train4.occupy
		[isCWOccupied and not (isOccupied4 or
			isOccupied3 or isOccupied2)] /
		isOccupied4 := true; raise SectionControl4.enableSection;
			raise ProtocolOutCW.occupied;
	transition from GlobalState to GlobalState when Train4.occupy
		[isCWOccupied and (isOccupied4 or
			isOccupied3 or isOccupied2)] /
		isOccupied4 := true; isDisabled4 := true; raise SectionControl4.disableSection;
		raise ProtocolOutCW.occupied;
	// Because of low-level implementation: the train goes onto the disabled section
	transition from GlobalState to GlobalState when Train4.unoccupy
		[isDisabled3] /
		isOccupied4 := false; isDisabled4 := false;
		raise SectionControl3.disableSection; raise ProtocolOutCW.unoccupied;
	// Restarting a train
	transition from GlobalState to GlobalState when Train4.unoccupy
		[isDisabled2 and not (isDisabled3)] /
		isOccupied4 := false; isDisabled2 := false;
		raise SectionControl2.enableSection; raise ProtocolOutCW.unoccupied;
	transition from GlobalState to GlobalState when Train4.unoccupy
		[not (isDisabled2 or isDisabled3)] /
			isOccupied4 := false; raise ProtocolOutCW.unoccupied;
	
		transition from GlobalState to GlobalState when ProtocolInCCW.occupied
			[isOccupied2 or isDisabled1] /
			isCCWOccupied := true; raise ProtocolOutCCW.stop;
		transition from GlobalState to GlobalState when ProtocolInCCW.occupied
			[not (isOccupied2 or isDisabled1)] /
			isCCWOccupied := true; raise ProtocolOutCCW.go;
		transition from GlobalState to GlobalState when ProtocolInCW.occupied
			[isOccupied3 or isDisabled4] /
			isCWOccupied := true; raise ProtocolOutCW.stop;
		transition from GlobalState to GlobalState when ProtocolInCW.occupied
			[not (isOccupied3 or isDisabled4)] /
			isCWOccupied := true; raise ProtocolOutCW.go;
		transition from GlobalState to GlobalState when ProtocolInCCW.unoccupied
			[not isOccupied1 and isOccupied2] /
			isCCWOccupied := false; isDisabled2 := false; raise SectionControl2.enableSection;
		transition from GlobalState to GlobalState when ProtocolInCCW.unoccupied
			[isDisabled1] /
			isCCWOccupied := false;
				raise SectionControl1.disableSection;
		transition from GlobalState to GlobalState when ProtocolInCCW.unoccupied
			[not (not isOccupied1 and isOccupied2 or isDisabled1)] /
			isCCWOccupied := false;
		transition from GlobalState to GlobalState when ProtocolInCW.unoccupied
			[not isOccupied4 and isOccupied3] /
			isCWOccupied := false;
				isDisabled3 := false; raise SectionControl3.enableSection;
		transition from GlobalState to GlobalState when ProtocolInCW.unoccupied
			[isDisabled4] /
			isCWOccupied := false;
				raise SectionControl4.disableSection;
		transition from GlobalState to GlobalState when ProtocolInCW.unoccupied
			[not (not isOccupied4 and isOccupied3 or isDisabled4)] /
				isCWOccupied := false;
		transition from GlobalState to GlobalState when ProtocolInCCW.go
			[not isDisabled1] / isDisabled1 := false; raise SectionControl1.enableSection;
		transition from GlobalState to GlobalState when ProtocolInCCW.go
			[isDisabled1 and not (isOccupied2 or isOccupied3)] /
				isDisabled1 := false; raise SectionControl1.enableSection;
		transition from GlobalState to GlobalState when ProtocolInCW.go
			[not isDisabled4] / isDisabled4 := false; raise SectionControl4.enableSection;
		transition from GlobalState to GlobalState when ProtocolInCW.go
			[isDisabled4 and not (isOccupied3 or
				isOccupied2)] /
				isDisabled4 := false; raise SectionControl4.enableSection;
}
