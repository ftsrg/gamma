package oracle
import "Interface/Interfaces"
statechart Oracle [
	port HighLevelSectionControl1 : requires SectionControl
	port LowLevelSectionControl1 : requires SectionControl
	port EnableError1 : provides Error
	port DisableError1 : provides Error
	port HighLevelSectionControl2 : requires SectionControl
	port LowLevelSectionControl2 : requires SectionControl
	port EnableError2 : provides Error
	port DisableError2 : provides Error
	port HighLevelSectionControl3 : requires SectionControl
	port LowLevelSectionControl3 : requires SectionControl
	port EnableError3 : provides Error
	port DisableError3 : provides Error
	port HighLevelSectionControl4 : requires SectionControl
	port LowLevelSectionControl4 : requires SectionControl
	port EnableError4 : provides Error
	port DisableError4 : provides Error
	port HighLevelSectionControl5 : requires SectionControl
	port LowLevelSectionControl5 : requires SectionControl
	port EnableError5 : provides Error
	port DisableError5 : provides Error
	port HighLevelSectionControl6 : requires SectionControl
	port LowLevelSectionControl6 : requires SectionControl
	port EnableError6 : provides Error
	port DisableError6 : provides Error
	port HighLevelSectionControl7 : requires SectionControl
	port LowLevelSectionControl7 : requires SectionControl
	port EnableError7 : provides Error
	port DisableError7 : provides Error
	port HighLevelSectionControl8 : requires SectionControl
	port LowLevelSectionControl8 : requires SectionControl
	port EnableError8 : provides Error
	port DisableError8 : provides Error
	port CcwProtocolInCCW1 : requires NewProtocol
	port CcwProtocolInCW1 : requires NewProtocol
	port CwProtocolInCCW1 : requires NewProtocol
	port CwProtocolInCW1 : requires NewProtocol
	port CcwProtocolInCCW2 : requires NewProtocol
	port CcwProtocolInCW2 : requires NewProtocol
	port CwProtocolInCCW2 : requires NewProtocol
	port CwProtocolInCW2 : requires NewProtocol
] {
	region mainRegion {
		initial InitialState
		state Good
		state Error
	}
	transition from InitialState to Good
	transition from Good to Error when !(HighLevelSectionControl1.enableSection ==
		LowLevelSectionControl1.enableSection) / raise EnableError1.error;
	transition from Good to Error when !(HighLevelSectionControl1.disableSection ==
		LowLevelSectionControl1.disableSection) / raise DisableError1.error;
	transition from Good to Error when !(HighLevelSectionControl2.enableSection ==
		LowLevelSectionControl2.enableSection) / raise EnableError2.error;
	transition from Good to Error when !(HighLevelSectionControl2.disableSection ==
		LowLevelSectionControl2.disableSection) / raise DisableError2.error;
	transition from Good to Error when !(HighLevelSectionControl3.enableSection ==
		LowLevelSectionControl3.enableSection) / raise EnableError3.error;
	transition from Good to Error when !(HighLevelSectionControl3.disableSection ==
		LowLevelSectionControl3.disableSection) / raise DisableError3.error;
	transition from Good to Error when !(HighLevelSectionControl4.enableSection ==
		LowLevelSectionControl4.enableSection) / raise EnableError4.error;
	transition from Good to Error when !(HighLevelSectionControl4.disableSection ==
		LowLevelSectionControl4.disableSection) / raise DisableError4.error;
	transition from Good to Error when !(HighLevelSectionControl5.enableSection ==
		LowLevelSectionControl5.enableSection) / raise EnableError5.error;
	transition from Good to Error when !(HighLevelSectionControl5.disableSection ==
		LowLevelSectionControl5.disableSection) / raise DisableError5.error;
	transition from Good to Error when !(HighLevelSectionControl6.enableSection ==
		LowLevelSectionControl6.enableSection) / raise EnableError6.error;
	transition from Good to Error when !(HighLevelSectionControl6.disableSection ==
		LowLevelSectionControl6.disableSection) / raise DisableError6.error;
	transition from Good to Error when !(HighLevelSectionControl7.enableSection ==
		LowLevelSectionControl7.enableSection) / raise EnableError7.error;
	transition from Good to Error when !(HighLevelSectionControl7.disableSection ==
		LowLevelSectionControl7.disableSection) / raise DisableError7.error;
	transition from Good to Error when !(HighLevelSectionControl8.enableSection ==
		LowLevelSectionControl8.enableSection) / raise EnableError8.error;
	transition from Good to Error when !(HighLevelSectionControl8.disableSection ==
		LowLevelSectionControl8.disableSection) / raise DisableError8.error;
	// Protocol equivalence
	transition from Good to Error when !(CcwProtocolInCCW1.occupied == CcwProtocolInCCW2.occupied)
	transition from Good to Error when !(CwProtocolInCCW1.occupied == CwProtocolInCCW2.occupied)
	transition from Good to Error when !(CcwProtocolInCCW1.unoccupied == CcwProtocolInCCW2.unoccupied)
	transition from Good to Error when !(CwProtocolInCCW1.unoccupied == CwProtocolInCCW2.unoccupied)
	transition from Good to Error when !(CcwProtocolInCCW1.go == CcwProtocolInCCW2.go)
	transition from Good to Error when !(CwProtocolInCCW1.go == CwProtocolInCCW2.go)
	transition from Good to Error when !(CcwProtocolInCCW1.stop == CcwProtocolInCCW2.stop)
	transition from Good to Error when !(CwProtocolInCCW1.stop == CwProtocolInCCW2.stop)
	transition from Good to Error when !(CcwProtocolInCW1.occupied == CcwProtocolInCW2.occupied)
	transition from Good to Error when !(CwProtocolInCW1.occupied == CwProtocolInCW2.occupied)
	transition from Good to Error when !(CcwProtocolInCW1.unoccupied == CcwProtocolInCW2.unoccupied)
	transition from Good to Error when !(CwProtocolInCW1.unoccupied == CwProtocolInCW2.unoccupied)
	transition from Good to Error when !(CcwProtocolInCW1.go == CcwProtocolInCW2.go)
	transition from Good to Error when !(CwProtocolInCW1.go == CwProtocolInCW2.go)
	transition from Good to Error when !(CcwProtocolInCW1.stop == CcwProtocolInCW2.stop)
	transition from Good to Error when !(CwProtocolInCW1.stop == CwProtocolInCW2.stop)
}
