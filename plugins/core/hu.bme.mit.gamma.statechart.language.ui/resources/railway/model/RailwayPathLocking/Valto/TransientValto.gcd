package transient_valto

import "Interfaces/TransientInterfaces.gcd"
import "Types/Types.gcd"

@TransitionPriority = order-based
statechart Valto(P_vezer : V_vezer_t, P_OV_tav : tavolsag_t, P_V_bal_hossz : tavolsag_t,
	P_V_jobb_hossz : tavolsag_t, P_V_belso_hossz : tavolsag_t, P_V_eleje_hossz : tavolsag_t, P_id :
	obj_t) [
	port E_VU_lez_Out : provides F_VU_lez
	port E_VU_lez_In : requires F_VU_lez
	port J_VU_lez_Out : provides F_VU_lez
	port J_VU_lez_In : requires F_VU_lez
	port B_VU_lez_Out : provides F_VU_lez
	port B_VU_lez_In : requires F_VU_lez
	port A : requires Valto_Also
	// OV_keres
	port J_OV_keres_Out : provides OV_keres
	port J_OV_keres_In : requires OV_keres
	port B_OV_keres_Out : provides OV_keres
	port B_OV_keres_In : requires OV_keres
	port E_OV_keres_Out : provides OV_keres
	port E_OV_keres_In : requires OV_keres
] {
	var BA_vezer : V_vezer_t := P_vezer
	var BA_VU_lez : V_VU_lez_t
	var OV_tav : tavolsag_t
	var jobb : tavolsag_t
	var bal : tavolsag_t
	var E_OV_keres_Req_J : boolean
	var E_OV_keres_Req_B : boolean
	// F_VU_lez
	region E_VU_lez_reg {
		initial E_VU_lez_Init
		state E_VU_lez_Inputra_Var
		state E_VU_lez_J_Valaszra_Var
		state E_VU_lez_B_Valaszra_Var
		choice E_VU_lez_Feltetel_Teljesul
	}
	transition from E_VU_lez_Init to E_VU_lez_Inputra_Var
	transition from E_VU_lez_Inputra_Var to E_VU_lez_Feltetel_Teljesul when E_VU_lez_In.ker
	transition from E_VU_lez_Feltetel_Teljesul to E_VU_lez_J_Valaszra_Var [BA_vezer = V_vezer_t::JOBB
		and (A.AI_ell::AI_ellValue = V_ell_t::JOBB_VEGALLAS or A.AI_ell::AI_ellValue =
		V_ell_t::JOBB_ELVESZTETT) and BA_VU_lez = V_VU_lez_t::NINCS] /
	raise J_VU_lez_Out.ker(E_VU_lez_In.ker::ker_VU_tip);
	transition from E_VU_lez_Feltetel_Teljesul to E_VU_lez_B_Valaszra_Var [BA_vezer = V_vezer_t::BAL
		and (A.AI_ell::AI_ellValue = V_ell_t::BAL_VEGALLAS or A.AI_ell::AI_ellValue =
		V_ell_t::BAL_ELVESZTETT) and BA_VU_lez = V_VU_lez_t::NINCS] /
	raise B_VU_lez_Out.ker(E_VU_lez_In.ker::ker_VU_tip);
	transition from E_VU_lez_Feltetel_Teljesul to E_VU_lez_Inputra_Var [else] /
	raise E_VU_lez_In.val(valasz_t::ELUTASITVA, P_id);
	// Jobb
	transition from E_VU_lez_J_Valaszra_Var to E_VU_lez_Inputra_Var when J_VU_lez_Out.val
		[J_VU_lez_Out.val::val_VU_tip = valasz_t::SIKERES] /
	BA_VU_lez := V_VU_lez_t::ELOLROL;
	raise E_VU_lez_In.val(valasz_t::SIKERES, J_VU_lez_Out.val::obj_id);
	transition from E_VU_lez_J_Valaszra_Var to E_VU_lez_Inputra_Var when J_VU_lez_Out.val
		[J_VU_lez_Out.val::val_VU_tip = valasz_t::ELUTASITVA] /
	raise E_VU_lez_In.val(valasz_t::ELUTASITVA, J_VU_lez_Out.val::obj_id);
	// Bal
	transition from E_VU_lez_B_Valaszra_Var to E_VU_lez_Inputra_Var when B_VU_lez_Out.val
		[B_VU_lez_Out.val::val_VU_tip = valasz_t::SIKERES] /
	BA_VU_lez := V_VU_lez_t::ELOLROL;
	raise E_VU_lez_In.val(valasz_t::SIKERES, B_VU_lez_Out.val::obj_id);
	transition from E_VU_lez_B_Valaszra_Var to E_VU_lez_Inputra_Var when B_VU_lez_Out.val
		[B_VU_lez_Out.val::val_VU_tip = valasz_t::ELUTASITVA] /
	raise E_VU_lez_In.val(valasz_t::ELUTASITVA, B_VU_lez_Out.val::obj_id);
	region J_VU_lez_reg {
		initial J_VU_lez_Init
		state J_VU_lez_Inputra_Var
		state J_VU_lez_Valaszra_Var
		choice J_VU_lez_Feltetel_Teljesul
		choice J_VU_lez_Valasz_Tipus
	}
	transition from J_VU_lez_Init to J_VU_lez_Inputra_Var
	transition from J_VU_lez_Inputra_Var to J_VU_lez_Feltetel_Teljesul when J_VU_lez_In.ker
	transition from J_VU_lez_Feltetel_Teljesul to J_VU_lez_Valaszra_Var [BA_vezer = V_vezer_t::JOBB
		and (A.AI_ell::AI_ellValue = V_ell_t::JOBB_VEGALLAS or A.AI_ell::AI_ellValue =
		V_ell_t::JOBB_ELVESZTETT) and BA_VU_lez = V_VU_lez_t::NINCS] /
	raise E_VU_lez_Out.ker(J_VU_lez_In.ker::ker_VU_tip);
	transition from J_VU_lez_Feltetel_Teljesul to J_VU_lez_Inputra_Var [else] /
	raise J_VU_lez_In.val(valasz_t::ELUTASITVA, P_id);
	transition from J_VU_lez_Valaszra_Var to J_VU_lez_Valasz_Tipus when E_VU_lez_Out.val
	transition from J_VU_lez_Valasz_Tipus to J_VU_lez_Inputra_Var [E_VU_lez_Out.val::val_VU_tip =
		valasz_t::SIKERES] /
	BA_VU_lez := V_VU_lez_t::GYOKFELOL;
	raise J_VU_lez_In.val(valasz_t::SIKERES, E_VU_lez_Out.val::obj_id);
	transition from J_VU_lez_Valasz_Tipus to J_VU_lez_Inputra_Var [E_VU_lez_Out.val::val_VU_tip =
		valasz_t::ELUTASITVA] /
	raise J_VU_lez_In.val(valasz_t::ELUTASITVA, E_VU_lez_Out.val::obj_id);
	region B_VU_lez_reg {
		initial B_VU_lez_Init
		state B_VU_lez_Inputra_Var
		state B_VU_lez_Valaszra_Var
		choice B_VU_lez_Feltetel_Teljesul
		choice B_VU_lez_Valasz_Tipus
	}
	transition from B_VU_lez_Init to B_VU_lez_Inputra_Var
	transition from B_VU_lez_Inputra_Var to B_VU_lez_Feltetel_Teljesul when B_VU_lez_In.ker
	transition from B_VU_lez_Feltetel_Teljesul to B_VU_lez_Valaszra_Var [BA_vezer = V_vezer_t::BAL
		and (A.AI_ell::AI_ellValue = V_ell_t::BAL_VEGALLAS or A.AI_ell::AI_ellValue =
		V_ell_t::BAL_ELVESZTETT) and BA_VU_lez = V_VU_lez_t::NINCS] /
	raise E_VU_lez_Out.ker(B_VU_lez_In.ker::ker_VU_tip);
	transition from B_VU_lez_Feltetel_Teljesul to B_VU_lez_Inputra_Var [else] /
	raise B_VU_lez_In.val(valasz_t::ELUTASITVA, P_id);
	transition from B_VU_lez_Valaszra_Var to B_VU_lez_Valasz_Tipus when E_VU_lez_Out.val
	transition from B_VU_lez_Valasz_Tipus to B_VU_lez_Inputra_Var [E_VU_lez_Out.val::val_VU_tip =
		valasz_t::SIKERES] /
	BA_VU_lez := V_VU_lez_t::GYOKFELOL;
	raise B_VU_lez_In.val(valasz_t::SIKERES, E_VU_lez_Out.val::obj_id);
	transition from B_VU_lez_Valasz_Tipus to B_VU_lez_Inputra_Var [E_VU_lez_Out.val::val_VU_tip =
		valasz_t::ELUTASITVA] /
	raise B_VU_lez_In.val(valasz_t::ELUTASITVA, E_VU_lez_Out.val::obj_id);
	// OV_keres
	region Trigger_OV_keres_reg {
		initial Trigger_OV_keres_Init
		state Trigger_OV_keres_Inputra_Var
		choice Trigger_OV_keres_Feltetel_Teljesul
		choice Trigger_OV_keres_Feltetel_BA_vezer
		state Trigger_OV_keres_Valaszra_VarB
		state Trigger_OV_keres_Valaszra_VarJ
	}
	transition from Trigger_OV_keres_Init to Trigger_OV_keres_Inputra_Var
	transition from Trigger_OV_keres_Inputra_Var to Trigger_OV_keres_Feltetel_Teljesul when cycle
	transition from Trigger_OV_keres_Feltetel_Teljesul to Trigger_OV_keres_Feltetel_BA_vezer
		[BA_VU_lez != V_VU_lez_t::NINCS]
		// Nincs akcio, ha trigger kezdoallapotbol nem teljesul
	transition from Trigger_OV_keres_Feltetel_Teljesul to Trigger_OV_keres_Inputra_Var [else]
	transition from Trigger_OV_keres_Feltetel_BA_vezer to Trigger_OV_keres_Valaszra_VarB [BA_vezer =
		V_vezer_t::JOBB] /
	raise B_OV_keres_Out.ker(P_V_bal_hossz);
	transition from Trigger_OV_keres_Feltetel_BA_vezer to Trigger_OV_keres_Valaszra_VarJ [BA_vezer =
		V_vezer_t::BAL] /
	raise J_OV_keres_Out.ker(P_V_jobb_hossz);
	// B
	transition from Trigger_OV_keres_Valaszra_VarB to Trigger_OV_keres_Inputra_Var when cycle [not
		(BA_VU_lez != V_VU_lez_t::NINCS)] /
	raise B_OV_keres_Out.felold;
	transition from Trigger_OV_keres_Valaszra_VarB to Trigger_OV_keres_Inputra_Var when
		B_OV_keres_Out.val // Csak elutasitva lehet
	// J
	transition from Trigger_OV_keres_Valaszra_VarJ to Trigger_OV_keres_Inputra_Var when cycle [not
		(BA_VU_lez != V_VU_lez_t::NINCS)] /
	raise J_OV_keres_Out.felold;
	transition from Trigger_OV_keres_Valaszra_VarJ to Trigger_OV_keres_Inputra_Var when
		J_OV_keres_Out.val // Csak elutasitva lehet
	region J_OV_keres_reg {
		initial J_OV_keres_Init
		state J_OV_keres_Inputra_Var
		merge J_OV_keres_Kisebb_Tav
		choice J_OV_keres_Feltetel_Teljesul
		state J_OV_keres_Accept {
			entry /
			OV_tav := 0;
		}
		state J_OV_keres_E {
			entry /
			OV_tav := 0;
		}
		state J_OV_keres_E_Req {
			entry /
			OV_tav := 0;
		}
	}
	transition from J_OV_keres_Init to J_OV_keres_Inputra_Var
	transition from J_OV_keres_Inputra_Var to J_OV_keres_Kisebb_Tav when J_OV_keres_In.ker &&
		B_OV_keres_In.ker /
	OV_tav := (J_OV_keres_In.ker::ker_OV_tav < B_OV_keres_In.ker::ker_OV_tav) ?
		J_OV_keres_In.ker::ker_OV_tav : B_OV_keres_In.ker::ker_OV_tav;
	transition from J_OV_keres_Inputra_Var to J_OV_keres_Kisebb_Tav when J_OV_keres_In.ker /
	OV_tav := J_OV_keres_In.ker::ker_OV_tav;
	transition from J_OV_keres_Kisebb_Tav to J_OV_keres_Feltetel_Teljesul /
	OV_tav := OV_tav + P_V_bal_hossz + P_V_belso_hossz + P_V_eleje_hossz;
	transition from J_OV_keres_Feltetel_Teljesul to J_OV_keres_Accept [OV_tav > P_OV_tav]
	transition from J_OV_keres_Feltetel_Teljesul to J_OV_keres_E [BA_vezer = V_vezer_t::JOBB] /
	raise E_OV_keres_Out.ker(OV_tav);
	transition from J_OV_keres_Feltetel_Teljesul to J_OV_keres_Accept [BA_vezer = V_vezer_t::BAL and
		A.AI_ell::AI_ellValue = V_ell_t::BAL_VEGALLAS]
	transition from J_OV_keres_Feltetel_Teljesul to J_OV_keres_E_Req [BA_vezer = V_vezer_t::BAL and
		!(A.AI_ell::AI_ellValue = V_ell_t::BAL_VEGALLAS) and A.AI_fogl::AI_foglValue ==
		fogl_t::SZABAD_F] /
	raise E_OV_keres_Out.ker(OV_tav);
	transition from J_OV_keres_Feltetel_Teljesul to J_OV_keres_Inputra_Var [BA_vezer = V_vezer_t::BAL
		and !(A.AI_ell::AI_ellValue = V_ell_t::BAL_VEGALLAS) and !(A.AI_fogl::AI_foglValue ==
		fogl_t::SZABAD_F)] /
	raise J_OV_keres_In.val(valasz_t::ELUTASITVA);
	// Valaszok
	transition from J_OV_keres_Accept to J_OV_keres_Inputra_Var when J_OV_keres_In.felold
	// E
	transition from J_OV_keres_E to J_OV_keres_Inputra_Var when J_OV_keres_In.felold /
	raise E_OV_keres_Out.felold;
	transition from J_OV_keres_E to J_OV_keres_Inputra_Var when E_OV_keres_Out.val
		[E_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise J_OV_keres_In.val(valasz_t::ELUTASITVA);
	// Req E
	transition from J_OV_keres_E_Req to J_OV_keres_Inputra_Var when cycle [!(A.AI_fogl::AI_foglValue ==
		fogl_t::SZABAD_F)] /
	raise J_OV_keres_In.val(valasz_t::ELUTASITVA);
	raise E_OV_keres_Out.felold;
	transition from J_OV_keres_E_Req to J_OV_keres_Inputra_Var when J_OV_keres_In.felold /
	raise E_OV_keres_Out.felold;
	transition from J_OV_keres_E_Req to J_OV_keres_Inputra_Var when E_OV_keres_Out.val
		[E_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise J_OV_keres_In.val(valasz_t::ELUTASITVA);
	region B_OV_keres_reg {
		initial B_OV_keres_Init
		state B_OV_keres_Inputra_Var
		merge B_OV_keres_Kisebb_Tav
		choice B_OV_keres_Feltetel_Teljesul
		state B_OV_keres_Accept {
			entry /
			OV_tav := 0;
		}
		state B_OV_keres_E {
			entry /
			OV_tav := 0;
		}
		state B_OV_keres_E_Req {
			entry /
			OV_tav := 0;
		}
	}
	transition from B_OV_keres_Init to B_OV_keres_Inputra_Var
	transition from B_OV_keres_Inputra_Var to B_OV_keres_Kisebb_Tav when J_OV_keres_In.ker &&
		B_OV_keres_In.ker /
	OV_tav := (J_OV_keres_In.ker::ker_OV_tav < B_OV_keres_In.ker::ker_OV_tav) ?
		J_OV_keres_In.ker::ker_OV_tav : B_OV_keres_In.ker::ker_OV_tav;
	transition from B_OV_keres_Inputra_Var to B_OV_keres_Kisebb_Tav when B_OV_keres_In.ker /
	OV_tav := B_OV_keres_In.ker::ker_OV_tav;
	transition from B_OV_keres_Kisebb_Tav to B_OV_keres_Feltetel_Teljesul /
	OV_tav := OV_tav + P_V_bal_hossz + P_V_belso_hossz + P_V_eleje_hossz;
	transition from B_OV_keres_Feltetel_Teljesul to B_OV_keres_Accept [OV_tav > P_OV_tav]
	transition from B_OV_keres_Feltetel_Teljesul to B_OV_keres_E [BA_vezer = V_vezer_t::BAL] /
	raise E_OV_keres_Out.ker(OV_tav);
	transition from B_OV_keres_Feltetel_Teljesul to B_OV_keres_Accept [BA_vezer = V_vezer_t::JOBB and
		A.AI_ell::AI_ellValue = V_ell_t::JOBB_VEGALLAS]
	transition from B_OV_keres_Feltetel_Teljesul to B_OV_keres_E_Req [BA_vezer = V_vezer_t::JOBB and
		!(A.AI_ell::AI_ellValue = V_ell_t::JOBB_VEGALLAS) and A.AI_fogl::AI_foglValue ==
		fogl_t::SZABAD_F] /
	raise E_OV_keres_Out.ker(OV_tav);
	transition from B_OV_keres_Feltetel_Teljesul to B_OV_keres_Inputra_Var [BA_vezer =
		V_vezer_t::JOBB and !(A.AI_ell::AI_ellValue = V_ell_t::JOBB_VEGALLAS) and
		!(A.AI_fogl::AI_foglValue == fogl_t::SZABAD_F)] /
	raise B_OV_keres_In.val(valasz_t::ELUTASITVA);
	// Valaszok
	transition from B_OV_keres_Accept to B_OV_keres_Inputra_Var when B_OV_keres_In.felold
	// E
	transition from B_OV_keres_E to B_OV_keres_Inputra_Var when B_OV_keres_In.felold /
	raise E_OV_keres_Out.felold;
	transition from B_OV_keres_E to B_OV_keres_Inputra_Var when E_OV_keres_Out.val
		[E_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise B_OV_keres_In.val(valasz_t::ELUTASITVA);
	// Req E
	transition from B_OV_keres_E_Req to B_OV_keres_Inputra_Var when cycle [!(A.AI_fogl::AI_foglValue ==
		fogl_t::SZABAD_F)] /
	raise B_OV_keres_In.val(valasz_t::ELUTASITVA);
	raise E_OV_keres_Out.felold;
	transition from B_OV_keres_E_Req to B_OV_keres_Inputra_Var when B_OV_keres_In.felold /
	raise E_OV_keres_Out.felold;
	transition from B_OV_keres_E_Req to B_OV_keres_Inputra_Var when E_OV_keres_Out.val
		[E_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise B_OV_keres_In.val(valasz_t::ELUTASITVA);
	region E_OV_keres_reg {
		initial E_OV_keres_Init
		state E_OV_keres_Inputra_Var
		choice E_OV_keres_Feltetel_Teljesul
		choice E_OV_keres_Feltetel_Req_J1
		state E_OV_keres_Req_J1
		state E_OV_keres_Accept
		state E_OV_keres_Req_JB {
			exit /
			E_OV_keres_Req_J := false;
			E_OV_keres_Req_B := false;
		}
	}
	transition from E_OV_keres_Init to E_OV_keres_Inputra_Var
	transition from E_OV_keres_Inputra_Var to E_OV_keres_Feltetel_Teljesul when E_OV_keres_In.ker /
	jobb := E_OV_keres_In.ker::ker_OV_tav + P_V_belso_hossz + P_V_eleje_hossz + P_V_jobb_hossz;
	bal := E_OV_keres_In.ker::ker_OV_tav + P_V_belso_hossz + P_V_eleje_hossz + P_V_bal_hossz;
	transition from E_OV_keres_Feltetel_Teljesul to E_OV_keres_Feltetel_Req_J1
		[A.AI_fogl::AI_foglValue != fogl_t::SZABAD_F]
	transition from E_OV_keres_Feltetel_Req_J1 to E_OV_keres_Req_J1 [A.AI_fogl::AI_foglValue !=
		fogl_t::SZABAD_F /*Sosem teljesul, lsd. elozo feltetel*/ ] /
	raise J_OV_keres_Out.ker(OV_tav);
	transition from E_OV_keres_Feltetel_Req_J1 to E_OV_keres_Inputra_Var [else] /
	raise E_OV_keres_In.val(valasz_t::ELUTASITVA);
	transition from E_OV_keres_Feltetel_Teljesul to E_OV_keres_Accept [bal > P_OV_tav and jobb >
		P_OV_tav]
		// Else - nincs mindehol kiirva, mert a tranziciok prioritasosak
	transition from E_OV_keres_Feltetel_Teljesul to E_OV_keres_Req_JB [jobb <= P_OV_tav and bal <=
		P_OV_tav and A.AI_fogl::AI_foglValue == fogl_t::SZABAD_F] /
	E_OV_keres_Req_J := true;
	E_OV_keres_Req_B := true;
	raise J_OV_keres_Out.ker(jobb);
	raise B_OV_keres_Out.ker(jobb
	/*Nem bal?*/);
	transition from E_OV_keres_Feltetel_Teljesul to E_OV_keres_Req_JB [jobb <= P_OV_tav
	/*Nem kene itt is szabad ellenorzes?*/ ] /
	E_OV_keres_Req_J := true;
	raise J_OV_keres_Out.ker(jobb);
	transition from E_OV_keres_Feltetel_Teljesul to E_OV_keres_Req_JB [bal <= P_OV_tav and
		A.AI_fogl::AI_foglValue == fogl_t::SZABAD_F] /
	E_OV_keres_Req_B := true;
	raise B_OV_keres_Out.ker(jobb
	/*Nem bal?*/);
	// Valaszok
	// Req_J1
	transition from E_OV_keres_Req_J1 to E_OV_keres_Inputra_Var when cycle [!(A.AI_fogl::AI_foglValue
		== fogl_t::SZABAD_F) /*Mindig teljesul, lsd. elozo feltetel*/ ] /
	raise E_OV_keres_In.val(valasz_t::ELUTASITVA);
	raise J_OV_keres_Out.felold;
	transition from E_OV_keres_Req_J1 to E_OV_keres_Inputra_Var when E_OV_keres_In.felold /
	raise J_OV_keres_Out.felold;
	transition from E_OV_keres_Req_J1 to E_OV_keres_Inputra_Var when J_OV_keres_Out.val
		[J_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise E_OV_keres_In.val(valasz_t::ELUTASITVA);
	// Accept
	transition from E_OV_keres_Accept to E_OV_keres_Inputra_Var when E_OV_keres_In.felold
	// Req_JB
	transition from E_OV_keres_Req_JB to E_OV_keres_Inputra_Var when E_OV_keres_In.felold
		[E_OV_keres_Req_J and E_OV_keres_Req_B] /
	raise J_OV_keres_Out.felold;
	raise B_OV_keres_Out.felold;
	transition from E_OV_keres_Req_JB to E_OV_keres_Inputra_Var when E_OV_keres_In.felold
		[E_OV_keres_Req_J] /
	raise J_OV_keres_Out.felold;
	transition from E_OV_keres_Req_JB to E_OV_keres_Inputra_Var when E_OV_keres_In.felold
		[E_OV_keres_Req_B] /
	raise B_OV_keres_Out.felold;
	transition from E_OV_keres_Req_JB to E_OV_keres_Inputra_Var when J_OV_keres_Out.val
		[J_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise E_OV_keres_In.val(valasz_t::ELUTASITVA);
	transition from E_OV_keres_Req_JB to E_OV_keres_Inputra_Var when B_OV_keres_Out.val
		[B_OV_keres_Out.val::val_OV_tip = valasz_t::ELUTASITVA] /
	raise E_OV_keres_In.val(valasz_t::ELUTASITVA);
}