/********************************************************************************
 * Copyright (c) 2018-2022 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.genmodel.language.GenModel with hu.bme.mit.gamma.expression.language.ExpressionLanguage

//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart" as statechart
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface" as interface
import "http://www.mit.bme.hu/gamma/statechart/Model/Composite" as composite
import "http://www.mit.bme.hu/gamma/genmodel/Model"
import "http://www.mit.bme.hu/gamma/trace/Model" as trace
import "http://www.mit.bme.hu/gamma/property/Model" as property
import "http://www.mit.bme.hu/gamma/expression/Model" as expression
import "http://www.mit.bme.hu/gamma/xSTS/Model" as xsts
import "http://www.mit.bme.hu/gamma/scenario/Model" as scenario

import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/sct/statechart/SText" as stext
import "http://www.yakindu.org/base/types/2.0.0" as types 

GenModel returns GenModel:
	(('import' 
		(packageImports+=[interface::Package | STRING] |
		'external' statechartImports+=[sgraph::Statechart| STRING] |
		'scenario' scenarioImports+=[scenario::ScenarioPackage| STRING] |
		'trace' traceImports+=[trace::ExecutionTrace | STRING])) |
		'include' genmodelImports+=[GenModel | STRING]
	)*
	(tasks += Task)*
;

Task returns Task:
	YakinduCompilation | CodeGeneration | AnalysisModelTransformation | TestGeneration |
		EventPriorityTransformation | AdaptiveContractTestGeneration |
		AdaptiveBehaviorConformanceChecking | PhaseStatechartGeneration |
		Verification | TraceReplayModelGeneration | Slicing | StatechartContractTestGeneration |
		StatechartContractGeneration
;

YakinduCompilation returns YakinduCompilation:
	StatechartCompilation | InterfaceCompilation
;

InterfaceCompilation returns InterfaceCompilation:
	'interface' '{'
		'statechart' ':' statechart=[sgraph::Statechart]
		(
			'folder' ':' targetFolder+=STRING | // The location of the folder relative to the project
			'file' ':' fileName+=STRING | // The name of the generated file
			'package' ':' packageName+=STRING // Gamma package name
		)*
	'}'
;

StatechartCompilation returns StatechartCompilation:
	'statechart'  '{'
		'statechart' ':' statechart=[sgraph::Statechart]
		(
			'folder' ':' targetFolder+=STRING | // The location of the folder relative to the project
			'file' ':' fileName+=STRING | // The name of the generated file
			'package' ':' packageName+=STRING | // Gamma package name
			'name' ':' statechartName+=STRING | // Gamma statechart name
			'mappings' '{'
				(interfaceMappings+=InterfaceMapping)*
			'}'
		)*
	'}'
;

CodeGeneration returns CodeGeneration:
	'code'  '{'
		'component' ':' component=[interface::Component]
		(
			'folder' ':' targetFolder+=STRING |
			'base-package' ':' packageName+=STRING | // Java base package
			'language' ':' programmingLanguages+=ProgrammingLanguage
		)*
	'}'
;

TestGeneration returns TestGeneration:
	'test' '{'
		'trace' ':' executionTrace=[trace::ExecutionTrace]
		(
			'folder' ':' targetFolder+=STRING |
			'file' ':' fileName+=STRING | // The name of the generated file
			'base-package' ':' packageName+=STRING | // Java base package
			'language' ':' programmingLanguages+=ProgrammingLanguage
		)*
	'}'
;

EventPriorityTransformation returns EventPriorityTransformation:
	'event-priority' '{'
		'statechart' ':' statechart=[statechart::StatechartDefinition]
		(
			'folder' ':' targetFolder+=STRING |
			'file' ':' fileName+=STRING // The name of the generated file
		)*
	'}'
;

enum ProgrammingLanguage returns ProgrammingLanguage:
	JAVA = 'java'
;

AnalysisModelTransformation returns AnalysisModelTransformation:
	'analysis' '{'
		model=ModelReference
		(
			'folder' ':' targetFolder+=STRING |			
			'file' ':' fileName+=STRING |
			'language' ':' languages+=AnalysisLanguage |
			'property-file' ':' propertyPackage=[property::PropertyPackage | STRING] | // Slicing
			'initial-state' ':' initialState=[property::PropertyPackage | STRING] |
			'initial-state-setting' ':' initialStateSetting=InitialStateSetting |
			'optimize' ':' optimize=BOOLEAN |
			'scheduler' ':' scheduler+=Scheduler |
			'constraint' ':' constraint=Constraint |
			coverages+=Coverage
		)*
	'}'
;

enum InitialStateSetting returns InitialStateSetting:
	EXECUTE_ENTRY_ACTIONS = "execute-entry-actions" | SKIP_ENTRY_ACTIONS = "skip-entry-actions"
;

ModelReference returns ModelReference:
	ComponentReference | XSTSReference
;

ComponentReference returns ComponentReference:
	'component' ':' component=[interface::Component] ('(' arguments+=Expression (',' arguments+=Expression)* ')')? 
;

XSTSReference returns XstsReference:
	'xsts' ':' xSts=[xsts::XSTS | STRING]
;

Constraint returns Constraint:
	'{' (SchedulingConstraint | OrchestratingConstraint) '}'
;

SchedulingConstraint returns SchedulingConstraint: 
	(instanceConstraint+=AsynchronousInstanceConstraint)+
;

// Duplicated in StatechartLanguage
ComponentInstanceReferenceExpression returns composite::ComponentInstanceReferenceExpression:
	componentInstance=[composite::ComponentInstance] ('->' child=ComponentInstanceReferenceExpression )?
;

ComponentInstancePortReferenceExpression returns composite::ComponentInstancePortReferenceExpression:
	instance=ComponentInstanceReferenceExpression '.' port=[interface::Port]
;

ComponentInstanceVariableReferenceExpression returns composite::ComponentInstanceVariableReferenceExpression:
	instance=ComponentInstanceReferenceExpression '.' variableDeclaration=[expression::VariableDeclaration]
;

ComponentInstanceStateConfigurationReferenceExpression returns composite::ComponentInstanceStateReferenceExpression:
	instance=ComponentInstanceReferenceExpression '.' region=[statechart::Region] '.' state=[statechart::State] 
;

ComponentInstanceTransitionReferenceExpression returns composite::ComponentInstanceTransitionReferenceExpression:
	instance=ComponentInstanceReferenceExpression '.' transitionId=[statechart::TransitionIdAnnotation]
;

//

AsynchronousInstanceConstraint returns AsynchronousInstanceConstraint:
	(instance=ComponentInstanceReferenceExpression | 'top') ':' '{'
		orchestratingConstraint=OrchestratingConstraint
	'}'
;

OrchestratingConstraint returns OrchestratingConstraint:
	'minimum-orchestrating-period' ':' minimumPeriod=TimeSpecification
	'maximum-orchestrating-period' ':' maximumPeriod=TimeSpecification
;

TimeSpecification returns interface::TimeSpecification:
	value=AdditiveExpression unit=TimeUnit
;

enum TimeUnit returns interface::TimeUnit:
	MILLISECOND = 'ms' | SECOND = 's'
;

enum Scheduler returns Scheduler:
	RANDOM = "random" //| FAIR = "fair"
;

enum AnalysisLanguage returns AnalysisLanguage:
	UPPAAL = "UPPAAL" | THETA = "Theta" | XSTS_UPPAAL = "XSTS-UPPAAL"
;

Coverage returns Coverage:
	StateCoverage | TransitionCoverage | TransitionPairCoverage |
		OutEventCoverage | InteractionCoverage | DataflowCoverage | InteractionDataflowCoverage
;

StateCoverage returns StateCoverage:
	{StateCoverage} 'state-coverage' ('{' 
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
	'}')?
;

TransitionCoverage returns TransitionCoverage:
	{TransitionCoverage} 'transition-coverage' ('{' 
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
	'}')?
;

TransitionPairCoverage returns TransitionPairCoverage:
	{TransitionPairCoverage} 'transition-pair-coverage' ('{' 
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
	'}')?
;

OutEventCoverage returns OutEventCoverage:
	{OutEventCoverage} 'out-event-coverage' ('{' 
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
		('port-include' ':' '[' portInclude+=ComponentInstancePortReferenceExpression (',' portInclude+=ComponentInstancePortReferenceExpression)* ']')?
		('port-exclude' ':' '[' portExclude+=ComponentInstancePortReferenceExpression (',' portExclude+=ComponentInstancePortReferenceExpression)* ']')?
	'}')?
;

InteractionCoverage returns InteractionCoverage:
	{InteractionCoverage} 'interaction-coverage' ('{'
		('sender-coverage-criterion' ':' senderCoverageCriterion=InteractionCoverageCriterion)?
		('receiver-coverage-criterion' ':' receiverCoverageCriterion=InteractionCoverageCriterion)?
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
		('port-include' ':' '[' portInclude+=ComponentInstancePortReferenceExpression (',' portInclude+=ComponentInstancePortReferenceExpression)* ']')?
		('port-exclude' ':' '[' portExclude+=ComponentInstancePortReferenceExpression (',' portExclude+=ComponentInstancePortReferenceExpression)* ']')?
		('state-include' ':' '[' stateInclude+=ComponentInstanceStateConfigurationReferenceExpression (',' stateInclude+=ComponentInstanceStateConfigurationReferenceExpression)* ']')?
		('state-exclude' ':' '[' stateExclude+=ComponentInstanceStateConfigurationReferenceExpression (',' stateExclude+=ComponentInstanceStateConfigurationReferenceExpression)* ']')?
		('transition-include' ':' '[' transitionInclude+=ComponentInstanceTransitionReferenceExpression (',' transitionInclude+=ComponentInstanceTransitionReferenceExpression)* ']')?
		('transition-exclude' ':' '[' transitionExclude+=ComponentInstanceTransitionReferenceExpression (',' transitionExclude+=ComponentInstanceTransitionReferenceExpression)* ']')?
	'}')?
;

DataflowCoverage returns DataflowCoverage:
	{DataflowCoverage} 'dataflow-coverage' ('{' 
		('coverage-criterion' ':' dataflowCoverageCriterion=DataflowCoverageCriterion)?
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
		('variable-include' ':' '[' variableInclude+=ComponentInstanceVariableReferenceExpression (',' variableInclude+=ComponentInstanceVariableReferenceExpression)* ']')?
		('variable-exclude' ':' '[' variableExclude+=ComponentInstanceVariableReferenceExpression (',' variableExclude+=ComponentInstanceVariableReferenceExpression)* ']')?
	'}')?
;

InteractionDataflowCoverage returns InteractionDataflowCoverage:
	{InteractionDataflowCoverage} 'interaction-dataflow-coverage' ('{' 
		('coverage-criterion' ':' interactionDataflowCoverageCriterion=DataflowCoverageCriterion)?
		('include' ':' '[' include+=ComponentInstanceReferenceExpression (',' include+=ComponentInstanceReferenceExpression)* ']')?
		('exclude' ':' '[' exclude+=ComponentInstanceReferenceExpression (',' exclude+=ComponentInstanceReferenceExpression)* ']')?
		('port-include' ':' '[' portInclude+=ComponentInstancePortReferenceExpression (',' portInclude+=ComponentInstancePortReferenceExpression)* ']')?
		('port-exclude' ':' '[' portExclude+=ComponentInstancePortReferenceExpression (',' portExclude+=ComponentInstancePortReferenceExpression)* ']')?
	'}')?
;

enum InteractionCoverageCriterion returns InteractionCoverageCriterion:
	EVERY_INTERACTION = 'every-interaction' | STATES_AND_EVENTS = 'states-and-events' | EVENTS = 'events'
;

enum DataflowCoverageCriterion returns DataflowCoverageCriterion:
	ALL_DEF = 'all-def' | ALL_C_USE = 'all-c-use' | ALL_P_USE = 'all-p-use' | ALL_USE = 'all-use'
;

Verification returns Verification:
	{Verification} 'verification' '{'
		(
			'trace-folder' ':' targetFolder+=STRING | // Trace folder
			'file' ':' fileName+=STRING | // Trace model
			'svg-file' ':' svgFileName+=STRING |
			'language' ':' analysisLanguages+=AnalysisLanguage |
			'query-file' ':' queryFiles+=STRING | // Queries
			'verification-argument' ':' verificationArguments+=STRING | // Potentially multiple - portfolio
			'property-file' ':' propertyPackages+=[property::PropertyPackage | STRING] | // Property models
			'base-package' ':' packageName+=STRING  | // Java base package
			'test-language' ':' programmingLanguages+=ProgrammingLanguage |
			'optimize' ':' ('false' | optimize?='true') |
			'back-annotate-to-original' ':' ('false' | backAnnotateToOriginal?='true') |
			'test-folder' ':' testFolder+=STRING
		)*
	'}'
;

TraceReplayModelGeneration returns TraceReplayModelGeneration:
	{TraceReplayModelGeneration} 'trace-replay' '{'
		'trace' ':' executionTrace=[trace::ExecutionTrace]
		(
			'system-file' ':' fileName+=STRING | // The name of the file containing the system
			'folder' ':' targetFolder+=STRING | 
			'environment-model-file' ':' environmentModelFileName+=STRING |
			'environment-model' ':' environmentModel=EnvironmentModel |
			'consider-out-events' ':' considerOutEvents=BOOLEAN
		)*
	'}'
;

enum EnvironmentModel:
	OFF = 'off' | SYNCHRONOUS = 'synchronous' | ASYNCHRONOUS = 'asynchronous'
;

Slicing returns Slicing:
	{Slicing} 'slicing' '{'
		'property' ':' propertyPackage=[property::PropertyPackage | STRING]
		(
			'file' ':' fileName+=STRING | // The name of the generated file
			'folder' ':' targetFolder+=STRING
		)*
	'}'
;

InterfaceMapping returns InterfaceMapping:
	'map' yakinduInterface=[stext::InterfaceScope] '=' gammaInterface=[interface::Interface] 'as' realizationMode=RealizationMode ('{'
		eventMappings+=EventMapping*
	'}')?
;

EventMapping returns EventMapping:
	'map' yakinduEvent=[types::Event] '=' gammaEvent=[interface::Event] 
;

enum RealizationMode returns interface::RealizationMode:
	PROVIDED = 'provided' | REQUIRED = 'required'
;

AdaptiveContractTestGeneration returns AdaptiveContractTestGeneration:
	{AdaptiveContractTestGeneration} 'adaptive-test' '{'
		modelTransformation=AnalysisModelTransformation
		(
		'folder' ':' targetFolder+=STRING |
		'file' ':' fileName+=STRING | // The name of the generated file
		'base-package' ':' packageName+=STRING | // Java base package
		'language' ':' programmingLanguages+=ProgrammingLanguage |
		'test-folder' ':' testFolder+=STRING
		)*
	'}'
;

AdaptiveBehaviorConformanceChecking returns AdaptiveBehaviorConformanceChecking:
	{AdaptiveBehaviorConformanceChecking} 'adaptive-conformance-check' '{'
		modelTransformation=AnalysisModelTransformation
		(
		'folder' ':' targetFolder+=STRING
		)*
	'}'
;

StatechartContractTestGeneration returns StatechartContractTestGeneration:
	{StatechartContractTestGeneration}
	'statechart-contract-test' '{'
		componentReference=ComponentReference 
		('folder' ':' targetFolder+=STRING)?
		('constraint' ':' '{'constraint= OrchestratingConstraint'}')?
	'}' 
;

StatechartContractGeneration returns StatechartContractGeneration:
	{StatechartContractGeneration} 
	'statechart-contract' '{'
	 'scenario' ':' scenario= [scenario::ScenarioDeclaration] ('(' arguments+=Expression  (',' arguments+=Expression )* ')')?
	 ('folder' ':' targetFolder+=STRING)?
	 ('name' ':' fileName+=STRING)?
	 ('restart-on-cold-violation' ':' StartAsColdViolation=BOOLEAN)?
	 ('loop-for-interaction' ':' UseIteratingVariable=BOOLEAN)?
	 ('automaton-type' ':' AutomatonType=ContractAutomatonType)?
	 ('test-type' ':' TestType=TestAutomatonType)?
	'}'
;
enum TestAutomatonType returns  TestAutomatonType:
	NEGATIVE = 'negative' | POSITIVE = 'positive'
;
enum ContractAutomatonType returns  ContractAutomatonType:
	MONITOR = 'monitor' | TEST = 'test'
;

PhaseStatechartGeneration returns PhaseStatechartGeneration:
	{PhaseStatechartGeneration} 'phase-statechart' '{'
		'statechart' ':' statechart=[statechart::StatechartDefinition] ('(' arguments+=Expression (',' arguments+=Expression)* ')')? 
		(
		'folder' ':' targetFolder+=STRING |
		'file' ':' fileName+=STRING // The name of the generated file
		)*
	'}'
;