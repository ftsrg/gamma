/********************************************************************************
 * Copyright (c) 2018-2022 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.expression.language.ExpressionLanguage with org.eclipse.xtext.common.Terminals

import "http://www.mit.bme.hu/gamma/expression/Model" 
import "http://www.eclipse.org/emf/2002/Ecore" as Ecore

///////////////////////////////////////////

ExpressionPackage returns ExpressionPackage:
	"specification" name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? '{'
		(
			typeDeclarations+=TypeDeclaration |
			constantDeclarations+=ConstantDeclaration |
			functionDeclarations+=FunctionDeclaration |
			basicConstraintDefinitions+=BasicConstraintDefinition
		)*
	'}'
;

///////////////////////////////////////////

ParameterDeclaration returns ParameterDeclaration:
	{ParameterDeclaration} name=ID ':' type=Type
;

FieldDeclaration returns FieldDeclaration:
	{FieldDeclaration} name=ID ':' type=Type
;

ConstantDeclaration returns ConstantDeclaration:
	'const' name=ID ':' type=Type ( ':=' expression=Expression )?
;

// Referred in the statechart language
VariableDeclaration returns VariableDeclaration:
	(annotations+=VariableDeclarationAnnotation)*
	'var' name=ID ':' type=Type (':=' expression=Expression)?
;

VariableDeclarationAnnotation returns VariableDeclarationAnnotation:
	TransientVariableDeclarationAnnotation | ResettableVariableDeclarationAnnotation
;

TransientVariableDeclarationAnnotation returns TransientVariableDeclarationAnnotation:
	{TransientVariableDeclarationAnnotation} '@Transient'
;

ResettableVariableDeclarationAnnotation returns ResettableVariableDeclarationAnnotation:
	{ResettableVariableDeclarationAnnotation} '@Resettable'
;

//Abstraction for extensibility
FunctionDeclaration:
	LambdaDeclaration
;

LambdaDeclaration returns LambdaDeclaration:
	'lambda' name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? ':' type=Type ( ':=' expression=Expression )?
;

////////////////////////////////////////
// Type language
////////////////////////////////////////

Type returns Type:
	TypeReference | TypeDefinition
;

TypeDeclaration returns TypeDeclaration:
	'type' name=ID ':' type=Type
;

TypeReference returns TypeReference:
	reference=[TypeDeclaration]
;

TypeDefinition returns TypeDefinition:
	VoidTypeDefinition |
	IntegerTypeDefinition |
	BooleanTypeDefinition |
	DecimalTypeDefinition |
	RationalTypeDefinition |
	ArrayTypeDefinition |
	IntegerRangeTypeDefinition |
	EnumerationTypeDefinition |
	RecordTypeDefinition |
	SubrangeTypeDefinition |
	FunctionTypeDefinition
;

VoidTypeDefinition returns VoidTypeDefinition:
	{VoidTypeDefinition} 'void'
;

IntegerTypeDefinition returns IntegerTypeDefinition:
	{IntegerTypeDefinition} 'integer'
;

BooleanTypeDefinition returns BooleanTypeDefinition:
	{BooleanTypeDefinition} 'boolean'
;

DecimalTypeDefinition returns DecimalTypeDefinition:
	{DecimalTypeDefinition} 'decimal'
;

RationalTypeDefinition returns RationalTypeDefinition:
	{RationalTypeDefinition} 'rational'
;

ArrayTypeDefinition returns ArrayTypeDefinition:
	'[' size=Expression ']' elementType=Type
;

IntegerRangeTypeDefinition returns IntegerRangeTypeDefinition:
	{IntegerRangeTypeDefinition} 'integer' 'range'
;

EnumerationTypeDefinition returns EnumerationTypeDefinition:
	'enum' '{' (literals+=EnumerationLiteralDefinition)(',' literals+=EnumerationLiteralDefinition)* '}'
;

EnumerationLiteralDefinition:
	name=ID
;

RecordTypeDefinition returns RecordTypeDefinition:
	'record' '{' (fieldDeclarations+=FieldDeclaration)(',' fieldDeclarations+=FieldDeclaration)* '}'
;

SubrangeTypeDefinition returns SubrangeTypeDefinition:
	{SubrangeTypeDefinition} '#[' ('-' 'inf' | lowerBound=Expression) 'to' ('inf' | upperBound=Expression) ']'
;

FunctionTypeDefinition returns FunctionTypeDefinition:
	'function' '(' ((parameterTypes+=Type)(',' parameterTypes+=Type)*)? ')' ':' returnType=Type
;

////////////////////////////////////////
// Expression language
////////////////////////////////////////

Expression returns Expression:
	IfThenElseExpression |
	ElseExpression
;

ElseExpression returns ElseExpression:
	{ElseExpression}
	'else'
;

//ternary, right-associative
IfThenElseExpression returns Expression:
	ImplyExpression({IfThenElseExpression.condition=current} '?' then=Expression (=> ':' else=Expression))?
;


//binary, right-associative
ImplyExpression returns Expression:
 	OrExpression ({ImplyExpression.leftOperand=current} 'imply' rightOperand=ImplyExpression)?
;

//multiary
OrExpression returns Expression:
	XorExpression ({OrExpression.operands+=current} ('or' operands+=XorExpression)+)?
;

//multiary
XorExpression returns Expression:
	AndExpression ({XorExpression.operands+=current} ('xor' operands+=AndExpression)+)?
;

//multiary
AndExpression returns Expression:
	UnaryLogicExpression ({AndExpression.operands+=current} ('and' operands+=UnaryLogicExpression)+)?
;

//prefix unary, right-associative
UnaryLogicExpression returns Expression:
	NotExpression |
	ForallExpression |
	ExistsExpression | 
	EquivalenceExpression	
;

NotExpression returns Expression:
	{NotExpression} => ('not' | '!') operand=UnaryLogicExpression
;

ForallExpression returns Expression:
	{ForallExpression} => 'forall' '(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')' ':' operand=UnaryLogicExpression
;

ExistsExpression returns Expression:
	{ExistsExpression} => 'exists' '(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')' ':' operand=UnaryLogicExpression
;

//binary, non-associative
EquivalenceExpression returns Expression:
	ComparisionExpression (
		{EqualityExpression.leftOperand=current} ('=' | '==') rightOperand=ComparisionExpression |
		{InequalityExpression.leftOperand=current} ('/=' | '!=') rightOperand=ComparisionExpression
	)?
;

//binary, non-associative
ComparisionExpression returns Expression:
	AdditiveExpression (
		(
			{GreaterExpression.leftOperand=current} '>' |
			{GreaterEqualExpression.leftOperand=current} '>=' |
			{LessExpression.leftOperand=current} '<' |
			{LessEqualExpression.leftOperand=current} '<='
		) rightOperand=AdditiveExpression
	)*
;

//binary, left-associative
AdditiveExpression returns Expression:
	MultiplicativeExpression (
		{AddExpression.operands+=current} => ('+' operands+=MultiplicativeExpression)+ |
		{SubtractExpression.leftOperand=current} '-' rightOperand=MultiplicativeExpression
	)*
;

//binary, left-associative
MultiplicativeExpression returns Expression:
	SignumExpression (
		{MultiplyExpression.operands+=current} => ('*' operands+=SignumExpression)+ |
		(
			{DivideExpression.leftOperand=current} '/' |
			{DivExpression.leftOperand=current} 'div' |
			{ModExpression.leftOperand=current} 'mod'
		) rightOperand=SignumExpression
	)*
;

//prefix unary, right-associative
SignumExpression returns Expression:
	{UnaryMinusExpression} => '-' operand=SignumExpression |
	{UnaryPlusExpression} => '+' operand=SignumExpression |
	AccessExpression
;

AccessExpression returns Expression:
	PrimaryExpression(
		{ArrayAccessExpression.operand=current} '[' index=Expression ']' |
		{FunctionAccessExpression.operand=current} '(' ((arguments+=Expression)(',' arguments+=Expression)*)? ')' |
		{RecordAccessExpression.operand=current} '.' fieldReference=FieldReferenceExpression |
		{SelectExpression.operand=current} '->' 'select'
	)* 
;

FieldReferenceExpression returns FieldReferenceExpression:
		{FieldReferenceExpression} fieldDeclaration=[FieldDeclaration] 
;

PrimaryExpression returns Expression: 
	ReferenceExpression | 
	LiteralExpression | 
	 '(' Expression ')'
;

ReferenceExpression returns Expression: // So it can be overriden
	DirectReferenceExpression
;

DirectReferenceExpression returns DirectReferenceExpression:
	declaration=[ValueDeclaration]
;

LiteralExpression returns Expression:
	IntegerLiteralExpression |
	DecimalLiteralExpression |
	RationalLiteralExpression |
	BooleanLiteralExpression |
	ArrayLiteralExpression |
	RecordLiteralExpression |
	EnumerationLiteralExpression |
	IntegerRangeLiteralExpression  |
	OpaqueExpression |
	InfinityExpression
;

InfinityExpression returns InfinityExpression:
	{InfinityExpression} 'infinity'
;

IntegerLiteralExpression:
	value=INTEGER
;

DecimalLiteralExpression:
	value=DECIMAL
;

RationalLiteralExpression:
	numerator=INTEGER '%' denominator=INTEGER
;

BooleanLiteralExpression:
	TrueExpression | FalseExpression
;

TrueExpression returns TrueExpression:
	{TrueExpression} 'true'
;

FalseExpression returns FalseExpression:
	{FalseExpression} 'false'
;

RecordLiteralExpression:
	'#' typeDeclaration=[TypeDeclaration] '{' (fieldAssignments+=FieldAssignment)(',' fieldAssignments+=FieldAssignment)* '}'
;

FieldAssignment:
	reference=FieldReferenceExpression ':=' value=Expression
;

EnumerationLiteralExpression:
	typeReference=TypeReference '::' reference=[EnumerationLiteralDefinition]
;

OpaqueExpression:
	expression=STRING
;

ArrayLiteralExpression:
	'#[' operands+=Expression (',' operands+=Expression)* ']'
;

IntegerRangeLiteralExpression:
	{IntegerRangeLiteralExpression}
	((leftInclusive?='<+') | '<-') (leftOperand=(Expression)) 
		'..' rightOperand=(Expression) ((rightInclusive?='+>') | '->')
; 


///////////////////////////////
// Basic Constraint
///////////////////////////////

BasicConstraintDefinition returns BasicConstraintDefinition:
	'constraint' expression=Expression
;

///////////////////////////////
// Terminal
///////////////////////////////

@Override 
terminal INT returns Ecore::EInt:
	'INT has been deactivated'
;

terminal INTEGER returns Ecore::EBigInteger:
	'-'? ('0'..'9')+
;

terminal DECIMAL returns Ecore::EBigDecimal:
	'-'? ('0'..'9')+ '.' ('0'..'9')+
;

BOOLEAN returns Ecore::EBoolean: // Terminal would not work due to the enshadowing of ID
	'true' | 'false'
;
